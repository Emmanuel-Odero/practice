{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Supervised Learning with Exploratory Data Analysis - Exercise 1","provenance":[{"file_id":"1WZHimGCQ0WURbmEih14U1CQb_A9izgVQ","timestamp":1590770724807}],"collapsed_sections":["kLG2VTrnTvYL","XecOwPNorl2W","J4wfHZwQrs-t","a9BPYqunry97","7KMRBJ7zr9HD","zSGyg6kWsBUl","iUNbvIvnT7ep","OI3P3YnHUEBk","ckfufNrcUHeH","6XC_g-zKxe-r","FlBMxEDBUc9B","rF2ABPsHUtbZ","vTbdjSrhVIiT","lQ2G4ZPDVOXE","xrmHVMVsVS--","HPQviDmNtta8","qjFHK1CKty7o","HSsicSdvt4Zs"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xMxtPsqcTsSH","colab_type":"text"},"source":["# Supervised Learning with Exploratory Data Analysis - Exercise 1"]},{"cell_type":"markdown","metadata":{"id":"kLG2VTrnTvYL","colab_type":"text"},"source":["## 1. Defining the Question"]},{"cell_type":"markdown","metadata":{"id":"XecOwPNorl2W","colab_type":"text"},"source":["### a) Specifying the Question"]},{"cell_type":"markdown","metadata":{"id":"8l3-hBO6bODP","colab_type":"text"},"source":["\n","> You just got some contract work with an Ecommerce company based in New York City that sells clothing online but they also have in-store style and clothing advice sessions. Customers come in to the store, have sessions/meetings with a personal stylist, then they can go home and order either on a mobile app or website for the clothes they want. The company is trying to decide whether to focus their efforts on their mobile app experience or their website. They've hired you on contract to help them figure it out!\n","\n"]},{"cell_type":"markdown","metadata":{"id":"J4wfHZwQrs-t","colab_type":"text"},"source":["### b) Defining the Metric for Success"]},{"cell_type":"markdown","metadata":{"id":"a9BPYqunry97","colab_type":"text"},"source":["### c) Understanding the context "]},{"cell_type":"markdown","metadata":{"id":"7KMRBJ7zr9HD","colab_type":"text"},"source":["### d) Recording the Experimental Design"]},{"cell_type":"markdown","metadata":{"id":"zSGyg6kWsBUl","colab_type":"text"},"source":["### e) Data Relevance"]},{"cell_type":"markdown","metadata":{"id":"iUNbvIvnT7ep","colab_type":"text"},"source":["## 2. Reading the Data"]},{"cell_type":"code","metadata":{"id":"nZgkfgyBZCOd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"2b2eef53-f873-4220-d62a-6b6f403ca908","executionInfo":{"status":"ok","timestamp":1590774208410,"user_tz":-180,"elapsed":1148,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"execution_count":25,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"XJn2KjW-WMlG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"a3d6de3d-6acc-4f8f-ed5b-feafb5e4d68d","executionInfo":{"status":"ok","timestamp":1590774210097,"user_tz":-180,"elapsed":2047,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Loading the Dataset\n","# Dataset url = http://bit.ly/EcommerceDataset \n","#\n","ecommerce = pd.read_csv(\"http://bit.ly/EcommerceDataset\")\n","ecommerce.columns"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Email', 'Address', 'Avatar', 'Avg. Session Length', 'Time on App',\n","       'Time on Website', 'Length of Membership', 'Yearly Amount Spent'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"OI3P3YnHUEBk","colab_type":"text"},"source":["## 3. Checking the Data"]},{"cell_type":"code","metadata":{"id":"YjSVNwgptHxY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"c38358dc-4fe5-4499-be82-ef6d47db243c","executionInfo":{"status":"ok","timestamp":1590774210665,"user_tz":-180,"elapsed":704,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Determining the no. of records in our dataset\n","#\n","ecommerce.shape"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(500, 8)"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"xHhTw5eKWr0n","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":445},"outputId":"0ba662a8-2054-4579-e746-a3e8497f034b","executionInfo":{"status":"ok","timestamp":1590774211900,"user_tz":-180,"elapsed":1012,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Previewing the top of our dataset\n","#\n","ecommerce.head()"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Email</th>\n","      <th>Address</th>\n","      <th>Avatar</th>\n","      <th>Avg. Session Length</th>\n","      <th>Time on App</th>\n","      <th>Time on Website</th>\n","      <th>Length of Membership</th>\n","      <th>Yearly Amount Spent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>mstephenson@fernandez.com</td>\n","      <td>835 Frank Tunnel\\nWrightmouth, MI 82180-9605</td>\n","      <td>Violet</td>\n","      <td>34.497268</td>\n","      <td>12.655651</td>\n","      <td>39.577668</td>\n","      <td>4.082621</td>\n","      <td>587.951054</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>hduke@hotmail.com</td>\n","      <td>4547 Archer Common\\nDiazchester, CA 06566-8576</td>\n","      <td>DarkGreen</td>\n","      <td>31.926272</td>\n","      <td>11.109461</td>\n","      <td>37.268959</td>\n","      <td>2.664034</td>\n","      <td>392.204933</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>pallen@yahoo.com</td>\n","      <td>24645 Valerie Unions Suite 582\\nCobbborough, D...</td>\n","      <td>Bisque</td>\n","      <td>33.000915</td>\n","      <td>11.330278</td>\n","      <td>37.110597</td>\n","      <td>4.104543</td>\n","      <td>487.547505</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>riverarebecca@gmail.com</td>\n","      <td>1414 David Throughway\\nPort Jason, OH 22070-1220</td>\n","      <td>SaddleBrown</td>\n","      <td>34.305557</td>\n","      <td>13.717514</td>\n","      <td>36.721283</td>\n","      <td>3.120179</td>\n","      <td>581.852344</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>mstephens@davidson-herman.com</td>\n","      <td>14023 Rodriguez Passage\\nPort Jacobville, PR 3...</td>\n","      <td>MediumAquaMarine</td>\n","      <td>33.330673</td>\n","      <td>12.795189</td>\n","      <td>37.536653</td>\n","      <td>4.446308</td>\n","      <td>599.406092</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                           Email  ... Yearly Amount Spent\n","0      mstephenson@fernandez.com  ...          587.951054\n","1              hduke@hotmail.com  ...          392.204933\n","2               pallen@yahoo.com  ...          487.547505\n","3        riverarebecca@gmail.com  ...          581.852344\n","4  mstephens@davidson-herman.com  ...          599.406092\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"e9AzGcZFrIIr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"c9abd140-a677-4fbc-856b-99f5d61d8845","executionInfo":{"status":"ok","timestamp":1590774213157,"user_tz":-180,"elapsed":1108,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Previewing the bottom of our dataset\n","# \n","ecommerce.tail()"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Email</th>\n","      <th>Address</th>\n","      <th>Avatar</th>\n","      <th>Avg. Session Length</th>\n","      <th>Time on App</th>\n","      <th>Time on Website</th>\n","      <th>Length of Membership</th>\n","      <th>Yearly Amount Spent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>495</th>\n","      <td>lewisjessica@craig-evans.com</td>\n","      <td>4483 Jones Motorway Suite 872\\nLake Jamiefurt,...</td>\n","      <td>Tan</td>\n","      <td>33.237660</td>\n","      <td>13.566160</td>\n","      <td>36.417985</td>\n","      <td>3.746573</td>\n","      <td>573.847438</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>katrina56@gmail.com</td>\n","      <td>172 Owen Divide Suite 497\\nWest Richard, CA 19320</td>\n","      <td>PaleVioletRed</td>\n","      <td>34.702529</td>\n","      <td>11.695736</td>\n","      <td>37.190268</td>\n","      <td>3.576526</td>\n","      <td>529.049004</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>dale88@hotmail.com</td>\n","      <td>0787 Andrews Ranch Apt. 633\\nSouth Chadburgh, ...</td>\n","      <td>Cornsilk</td>\n","      <td>32.646777</td>\n","      <td>11.499409</td>\n","      <td>38.332576</td>\n","      <td>4.958264</td>\n","      <td>551.620145</td>\n","    </tr>\n","    <tr>\n","      <th>498</th>\n","      <td>cwilson@hotmail.com</td>\n","      <td>680 Jennifer Lodge Apt. 808\\nBrendachester, TX...</td>\n","      <td>Teal</td>\n","      <td>33.322501</td>\n","      <td>12.391423</td>\n","      <td>36.840086</td>\n","      <td>2.336485</td>\n","      <td>456.469510</td>\n","    </tr>\n","    <tr>\n","      <th>499</th>\n","      <td>hannahwilson@davidson.com</td>\n","      <td>49791 Rachel Heights Apt. 898\\nEast Drewboroug...</td>\n","      <td>DarkMagenta</td>\n","      <td>33.715981</td>\n","      <td>12.418808</td>\n","      <td>35.771016</td>\n","      <td>2.735160</td>\n","      <td>497.778642</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                            Email  ... Yearly Amount Spent\n","495  lewisjessica@craig-evans.com  ...          573.847438\n","496           katrina56@gmail.com  ...          529.049004\n","497            dale88@hotmail.com  ...          551.620145\n","498           cwilson@hotmail.com  ...          456.469510\n","499     hannahwilson@davidson.com  ...          497.778642\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"n8-dW4sQWzbc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":272},"outputId":"b2fab9c9-c63a-4d76-d563-32d40b326470","executionInfo":{"status":"ok","timestamp":1590774214535,"user_tz":-180,"elapsed":747,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking whether each column has an appropriate datatype\n","#\n","ecommerce.info()"],"execution_count":30,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 500 entries, 0 to 499\n","Data columns (total 8 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   Email                 500 non-null    object \n"," 1   Address               500 non-null    object \n"," 2   Avatar                500 non-null    object \n"," 3   Avg. Session Length   500 non-null    float64\n"," 4   Time on App           500 non-null    float64\n"," 5   Time on Website       500 non-null    float64\n"," 6   Length of Membership  500 non-null    float64\n"," 7   Yearly Amount Spent   500 non-null    float64\n","dtypes: float64(5), object(3)\n","memory usage: 31.4+ KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ckfufNrcUHeH","colab_type":"text"},"source":["## 4. External Data Source Validation"]},{"cell_type":"markdown","metadata":{"id":"6L4sl_0WXlbg","colab_type":"text"},"source":["Making sure your data matches something outside of the dataset is very important. It allows you to ensure that the measurements are roughly in line with what they should be and it serves as a check on what other things might be wrong in your dataset. External validation can often be as simple as checking your data against a single number, as we will do here."]},{"cell_type":"markdown","metadata":{"id":"6XC_g-zKxe-r","colab_type":"text"},"source":["### a.Validation"]},{"cell_type":"markdown","metadata":{"id":"FlBMxEDBUc9B","colab_type":"text"},"source":["## 5. Tidying the Dataset"]},{"cell_type":"code","metadata":{"id":"zDI8JsG7a8ch","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"1ef9208b-2b4a-4745-bda2-d84965ed8b0b","executionInfo":{"status":"ok","timestamp":1590774218445,"user_tz":-180,"elapsed":1323,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["ecommerce.columns"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Email', 'Address', 'Avatar', 'Avg. Session Length', 'Time on App',\n","       'Time on Website', 'Length of Membership', 'Yearly Amount Spent'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"5o_bQcT5W3Wz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"3a3d7ab9-f5f5-45da-95bc-0ee873823973","executionInfo":{"status":"ok","timestamp":1590774219273,"user_tz":-180,"elapsed":1464,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Outliers\n","#\n","sns.boxplot(y='Avg. Session Length', data=ecommerce, palette='hls')"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11b0c429b0>"]},"metadata":{"tags":[]},"execution_count":32},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"AWAznWfhiGYp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"2c33853d-536b-4a31-b8fa-1e6c8fe47b53","executionInfo":{"status":"ok","timestamp":1590774253974,"user_tz":-180,"elapsed":2106,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Outliers\n","#\n","sns.boxplot(y='Time on App', data=ecommerce, palette='hls')"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11b0bbddd8>"]},"metadata":{"tags":[]},"execution_count":34},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"PXAsNu7-iQJj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"a7a3a808-de6c-42df-ea3b-2b6c0e7b514d","executionInfo":{"status":"ok","timestamp":1590774295703,"user_tz":-180,"elapsed":3070,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Outliers\n","#\n","sns.boxplot(y='Time on Website', data=ecommerce, palette='hls')"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11b0b94748>"]},"metadata":{"tags":[]},"execution_count":35},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAX4AAADrCAYAAABuBv24AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAASEklEQVR4nO3df5BdZ33f8ffHK2GpE5tt8aIaFEspTknBE+R2q0FqZYoyJuZHMlLqJDSozTSkmrZDSaAlDCPPUHesTkkaSJMmaTUl2DNKWhyTdcCJ2zIgkBw5dmUiCzyAxiXZCcaVl8A6FmDXkr794x7ViqzdPbvSuXfX5/2aOTP3/Lrnu5qdzz56znOek6pCktQfl426AEnScBn8ktQzBr8k9YzBL0k9Y/BLUs8Y/JLUM6tGXUAbV111VW3cuHHUZUjSivLQQw99vaomzt++IoJ/48aNHDlyZNRlSNKKkmT6Qtvt6pGknjH4JalnDH5J6hmDX5J6pvPgTzKW5I+S3NOsf0+SB5I8muSjSV7UdQ1SF2ZnZ7ntttuYnZ0ddSnSogyjxf8zwBfPWf8A8KGquhb4JvD2IdQgXXJTU1McP36cu+++e9SlSIvSafAnWQ+8GfgvzXqA7cBdzSF3ADu6rEHqwuzsLIcOHaKqOHjwoK1+rShdt/h/Cfg54Eyz/hJgtqpONetfBV7ecQ3SJTc1NcXZd1lUla1+rSidBX+StwBPVNVDSzx/d5IjSY7MzMxc4uqki3P//fdz6tSg/XLq1CkOHz484oqk9rps8f8d4IeT/Anw3xh08fwHYDzJ2SeG1wOPXejkqtpXVZNVNTkx8bwnjqWR2rJlC6tWDX6NV61axdatW0dckdReZ8FfVe+rqvVVtRF4K/DpqnobcAC4uTnsJ4Hf7aoGqSs7d+5kcMsKkrBjh7eqtHKMYhz/e4F3J3mUQZ//h0dQg3RRxsfH2bZtG0m44YYbGB8fH3VJUmtDmaStqj4DfKb5/BVg8zCuK3Vp586dPPbYY7b2teKsiNk5peVofHycW265ZdRlSIvmlA2S1DMGvyT1jMEvST1j8EtSz3hzV4uyf/9+pqcv+Da33jlx4gQA69atG3Ely8OGDRvYtWvXqMtQCwa/tERPP/30qEuQlsTg16LYonvO3r17AdizZ8+IK5EWxz5+SeoZg1+Sesbgl6SeMfglqWcMfknqGYNfknrG4JeknjH4JalnDH5J6hmDX5J6xuCXpJ4x+CWpZwx+SeoZg1+Sesbgl6SeMfglqWc6C/4ka5I8mOThJI8kubXZvj3J55J8IckdSXwZjCQNUZct/meA7VX1GmATcFOSrcAdwFur6jpgGvjJDmuQJJ2ns+CvgZPN6upmOQ3836o63mz/JPD3u6pBkvR8nfbxJxlLchR4gkHIPwisSjLZHHIz8N1znLs7yZEkR2ZmZrosU5J6pdPgr6rTVbUJWA9sBl4NvBX4UJIHgacY/C/gQufuq6rJqpqcmJjoskxJ6pWhjOqpqlngAHBTVd1fVduqajNwEDg+/9mSpEupy1E9E0nGm89rgRuBLyV5abPtcuC9wH/qqgZJ0vN1OZTyauCOJGMM/sDcWVX3JPmFJG9ptv16VX26wxokSefpLPir6hhw/QW2vwd4T1fXlSTNzyd3JalnDH5J6hmDX5J6xuCXpJ4x+CWpZwx+SeoZg1+Sesbgl6SeMfglqWcMfknqGYNfknrG4JeknjH4JalnDH5J6hmDX5J6xuCXpJ4x+CWpZwx+SeoZg1+Sesbgl6SeaRX8SdYmeWXXxUiSurdg8Cf5IeAo8N+b9U1JPt51YZKkbrRp8f9rYDMwC1BVR4Hv6bAmSVKH2gT/s1X15HnbaqGTkqxJ8mCSh5M8kuTWZvsPJPlckqNJ7kty7VIKlyQtTZvgfyTJTwBjSb43ya8Ah1uc9wywvapeA2wCbkryWuDXgbdV1Sbgt4Bblli7JGkJ2gT/vwBezSDIfwt4EviZhU6qgZPN6upmqWa5stn+YuBri6xZknQRVrU45s1VtQfYc3ZDkh8FfnuhE5OMAQ8B1wK/WlUPJPlp4PeTfAf4c+C1S6pckrQkbVr872u57Xmq6nTTpbMe2JzkOuBdwJuqaj3wEeCDFzo3ye4kR5IcmZmZaXM5SVILc7b4k7wReBPw8iS/fM6uK4FTi7lIVc0mOQC8EXhNVT3Q7PoozTDRC5yzD9gHMDk5ueDNZElSO/O1+L8GHAGeZtBdc3b5OPCDC31xkokk483ntcCNwBeBFyf5681hZ7dJkoZkzhZ/VT0MPJzkN6tqUS38xtXAHU0//2XAnVV1T5J/AnwsyRngm8BPLaVwSdLSzNfVc2dV/RjwR0nO7WoJg0E73z/fF1fVMeD6C2yfAqaWWK8k6SLNN6rn7JDNtwyjEEnScMzZx19Vjzcfvw78aVVNA5cDr8Gx95K0YrUZznkQWJPk5cD/BP4hcHuXRUmSutPmAa5U1beTvB34tar6+SRHuy5sOdm/fz/T09OjLkPLzNnfib179464Ei03GzZsYNeuXaMuY06tgj/JFuBtwNubbWPdlbT8TE9P85Uvf4mJMd9bo+dcdvoMAE89enzElWg5mWl+L5azNsH/swye1J2qqkeS/DXgQLdlLT8TY5dx8xVrR12GpGXurqe+M+oSFrRg8FfVZ4HPJrkyyRVV9RXgnd2XJknqQps3cE0m+TxwDPhCM7/+3+q+NElSF9p09fwG8M+r6hBAkr/LYHK1eR/gkiQtT23uVp4+G/oAVXUfi5ykTZK0fMw3ZcPfbD5+Nsl/Bv4rg5eo/Djwme5LkyR1Yb6unl88b/3953x2mmRJWqHmm53z9cMsRJI0HG1G9axL8uEk9zbrr2qe4pUkrUBtbu7eDvwP4GXN+nEGD3VJklagNsF/VVXdCZwBaF7KcrrTqiRJnWkT/N9K8hKaG7pJXgs82WlVkqTOtHmA618yeM/uK5L8ATAB3NxpVZKkzsw3jv9ngcPA54DXAa9k8NrFL1fVs8MpT5J0qc3X1bMe+CXgCeBTDKZl3ghc0X1ZkqSuzDeO/18BJHkRMAlsBf4xsC/JbFW9ajglSpIupTZ9/GuBK4EXN8vXgM93WZQkqTvz9fHvA14NPAU8wKC//4NV9c0h1SZJ6sB8ffzXAJcD/wd4DPgqMDuMoiRJ3Zmvj/+mJGHQ6t/KYFjndUm+AdxfVe+f61yAJGuAgwz+eKwC7qqq9yc5xHM3iF8KPFhVOy7+R+nOiRMn+NapMyvilWqSRmvm1Bm+feLEqMuY17x9/FVVDN66Ncvgoa0ngbcAm/mLs3VeyDPA9qo6mWQ1cF+Se6tq29kDknwM+N2L+QEkSYszXx//Oxm09LcCzzLo4z/M4I1cC97cbf5onGxWVzfL/5/OOcmVwHYGI4WWtXXr1vHUU0/6snVJC7rrqe9wxbp1oy5jXvO1+DcCvw28q6oeX8qXJxkDHgKuBX61qh44Z/cO4FNV9edznLsb2A1wzTXXLOXykqQLmPPmblW9u6o+ttTQb77jdFVtYvAw2OYk152z+x8weKvXXOfuq6rJqpqcmJhYagmSpPO0maTtolXVLHAAuAkgyVUM7hP83jCuL0l6TmfBn2QiyXjzeS1wI/ClZvfNwD1V9XRX15ckXVibJ3eX6mrgjqaf/zLgzqq6p9n3VuDfdXhtSdIcFgz+JD8CfIDBmPs0S1XVlfOdV1XHgOvn2Pf3Fl2pJOmSaNPi/3ngh6rqi10XI0nqXps+/hOGviS9cLRp8R9J8lHgbgZP4wJQVb/TWVWSpM60Cf4rgW8DbzhnWwEGvyStQAsGf1Ut+ykVJEntLdjHn2R9kqkkTzTLx5KsH0ZxkqRLr83N3Y8AHwde1iyfaLZJklagNsE/UVUfqapTzXI74OQ5krRCtQn+P0uyK8lYs+wC/qzrwiRJ3WgT/D8F/BiDVzA+zmCeHW/4StIK1WZUzzTww0OoRZI0BEOZllmStHwY/JLUMwa/JPVMm2mZ1wH/FnhZVb0xyauALVX14c6rW0ZmTp/hrqe+M+oytIzMnj4DwPiY7Sc9Z+b0Ga4YdRELaDNXz+0MHtja06wfBz4K9Cb4N2zYMOoStAx9Y3oagCv8/dA5rmD5Z0ab4L+qqu5M8j6AqjqV5HTHdS0ru3btGnUJWob27t0LwJ49exY4Ulpe2vwf9VtJXsJgRk6SvBZ4stOqJEmdadPifzeDuXpekeQPGEzXcHOnVUmSOtPmAa7PJXkd8EoG79v9clU923llkqROtBnVMwa8CdjYHP+GJFTVBzuuTZLUgTZdPZ8AngY+D5zpthxJUtfaBP/6qvr+ziuRJA1Fm1E99yZ5w8KH/UVJ1iR5MMnDSR5JcmuzPUn2Jjme5ItJ3rnoqiVJS9amxf+HwFSSy4BnGdzgraq6coHzngG2V9XJJKuB+5LcC/wN4LuB76uqM0leehH1S5IWqU3wfxDYAny+qqrtFzfHnmxWVzdLAf8M+ImqOtMc98SiKpYkXZQ2XT1/CnxhMaF/VvPGrqPAE8Anq+oB4BXAjyc5kuTeJN+72O+VJC1dmxb/V4DPNN00z5zd2GY4Z1WdBjYlGWfQXXQdcDnwdFVNJvkR4DeAbeefm2Q3sBvgmmuuafOzSJJaaNPi/2PgU8CLGMw/dHZprapmgQPATcBXgd9pdk0BFxwxVFX7qmqyqiYnJny3uyRdKm2e3L11KV+cZAJ4tqpmk6wFbgQ+ANwNvJ7BH5TXMZjtU5I0JHMGf5L/WFXvSPIJmgnazlVVC72H92rgjubJ38uAO6vqniT3Ab+Z5F0Mbv7+9NLLlyQt1nwt/n8EvAP490v54qo6Blx/ge2zwJuX8p2SpIs3X/D/b4Cq+uyQapEkDcF8wT+R5N1z7XSSNklameYL/jHguxg8qStJeoGYL/gfr6p/M7RKJElDMd84flv6kvQCNF/w/8DQqpAkDc2cwV9V3xhmIZKk4WgzZYMk6QXE4JeknjH4JalnDH5J6hmDX5J6xuCXpJ4x+CWpZwx+SeoZg1+Sesbgl6SeMfglqWcMfknqGYNfknrG4JeknjH4JalnDH5J6hmDX5J6prPgT7ImyYNJHk7ySJJbm+23J/njJEebZVNXNUiSnm9Vh9/9DLC9qk4mWQ3cl+TeZt97ququDq8tSZpDZ8FfVQWcbFZXN0t1dT1JUjud9vEnGUtyFHgC+GRVPdDs2pvkWJIPJbl8jnN3JzmS5MjMzEyXZUpSr3Qa/FV1uqo2AeuBzUmuA94HfB/wt4G/Arx3jnP3VdVkVU1OTEx0WaYk9cpQRvVU1SxwALipqh6vgWeAjwCbh1GDJGmgy1E9E0nGm89rgRuBLyW5utkWYAfwha5qkCQ9X5ejeq4G7kgyxuAPzJ1VdU+STyeZAAIcBf5phzVIks7T5aieY8D1F9i+vatrSpIW5pO7ktQzBr8k9YzBL0k9Y/BLUs8Y/JLUMwa/JPWMwS9JPWPwS1LPGPyS1DMGvyT1TJdz9egFaP/+/UxPT4+6jGXh7L/D3r17R1zJ8rBhwwZ27do16jLUgsEvLdGaNWtGXYK0JAa/FsUWnbTy2ccvST1j8EtSzxj8ktQzBr8k9YzBL0k9Y/BLUs8Y/JLUMwa/JPWMwS9JPWPwS1LPdBb8SdYkeTDJw0keSXLreft/OcnJrq4vSbqwLufqeQbYXlUnk6wG7ktyb1X9YZJJ4C93eG1J0hw6a/HXwNkW/epmqSRjwC8AP9fVtaVhmJ2d5bbbbmN2dnbUpUiL0mkff5KxJEeBJ4BPVtUDwDuAj1fV411eW+ra1NQUx48f5+677x51KdKidBr8VXW6qjYB64HNSW4AfhT4lYXOTbI7yZEkR2ZmZrosU1q02dlZDh06RFVx8OBBW/1aUYYyqqeqZoEDwOuBa4FHk/wJ8JeSPDrHOfuqarKqJicmJoZRptTa1NQUVQVAVdnq14rS5aieiSTjzee1wI3AQ1X1V6tqY1VtBL5dVdd2VYPUlfvvv59Tp04BcOrUKQ4fPjziiqT2umzxXw0cSHIM+F8M+vjv6fB60tBs2bKFVasGg+JWrVrF1q1bR1yR1F5nwzmr6hhw/QLHfFdX15e6tHPnTg4dOgRAEnbs2DHiiqT2fHJXWoLx8XG2bdtGEm644QbGx8dHXZLUmi9bl5Zo586dPPbYY7b2teIY/NISjY+Pc8stt4y6DGnR7OqRpJ4x+CWpZwx+SeoZg1+SeiZnHztfzpLMANOjrkO6gKuAr4+6CGkOG6rqeXPerIjgl5arJEeqanLUdUiLYVePJPWMwS9JPWPwSxdn36gLkBbLPn5J6hlb/JLUMwa/JPWMwS9JPWPwS1LPGPyS1DP/DyYp5uZ/5rQpAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ko4l_qZciarq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"8ec3e49b-ae01-481e-e0e9-2e651ac670b8","executionInfo":{"status":"ok","timestamp":1590774332719,"user_tz":-180,"elapsed":1786,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Outliers\n","#\n","sns.boxplot(y='Length of Membership', data=ecommerce, palette='hls')"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11b0b057f0>"]},"metadata":{"tags":[]},"execution_count":36},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"LSWHrCuBiid2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"62c59acd-f067-4aeb-b910-9570b41f0e7c","executionInfo":{"status":"ok","timestamp":1590774363544,"user_tz":-180,"elapsed":1231,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Outliers\n","#\n","sns.boxplot(y='Yearly Amount Spent', data=ecommerce, palette='hls')"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f11b0a6e588>"]},"metadata":{"tags":[]},"execution_count":37},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"h9XTm9EpjPdR","colab_type":"code","colab":{}},"source":["# Numerical columns\n","#\n","numeric = ecommerce[['Avg. Session Length', 'Time on App','Time on Website', \\\n","           'Length of Membership', 'Yearly Amount Spent']]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PWlukLKUvFQN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"b95da92a-b153-4ecb-de75-ccba61e8d783","executionInfo":{"status":"ok","timestamp":1590774698975,"user_tz":-180,"elapsed":1630,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for Anomalies\n","#\n","# Getting ouliers from our dataframe using a z-test\n","#\n","from scipy import stats\n","\n","z = np.abs(stats.zscore(numeric))\n","print(z, \"\\n\\n----****_____________****----\\n\")\n","\n","# Dropping and Confirming that our outliers have been dropped from the dataset.\n","#\n","df_o = numeric[(z < 3).all(axis=1)]\n","\n","print(f\"Previous dataframe size : {numeric.shape[0]}\")\n","print(f\"New dataframe size: {df_o.shape[0]}\")"],"execution_count":54,"outputs":[{"output_type":"stream","text":["[[1.45635117 0.60728003 2.49358859 0.55010651 1.11865385]\n"," [1.13650215 0.94946372 0.20655573 0.87092735 1.35178302]\n"," [0.05272322 0.72713923 0.04968115 0.5720669  0.14850091]\n"," ...\n"," [0.40987204 0.55685385 1.26018697 1.42726105 0.66013536]\n"," [0.27159708 0.34124841 0.21829075 1.19904197 0.54072439]\n"," [0.66842216 0.36882066 1.27732288 0.79967926 0.01937765]] \n","\n","----****_____________****----\n","\n","Previous dataframe size : 500\n","New dataframe size: 492\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PvCYb6dgW4yh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"aabba62b-8c76-45a4-cabc-dfbb7e951626","executionInfo":{"status":"ok","timestamp":1590774710655,"user_tz":-180,"elapsed":1143,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Identifying the Missing Data\n","#\n","ecommerce.isnull().sum()"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Email                   0\n","Address                 0\n","Avatar                  0\n","Avg. Session Length     0\n","Time on App             0\n","Time on Website         0\n","Length of Membership    0\n","Yearly Amount Spent     0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"MpsDGKZHsf_W","colab_type":"code","colab":{}},"source":["# Dealing with the Missing Data\n","#"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D-4I__6Os4C5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"a27f3d1b-82e2-4347-8b92-75742df74339","executionInfo":{"status":"ok","timestamp":1590774714327,"user_tz":-180,"elapsed":1227,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# More data cleaning procedures\n","#\n","ecommerce.duplicated().sum()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"rF2ABPsHUtbZ","colab_type":"text"},"source":["## 6. Exploratory Analysis"]},{"cell_type":"code","metadata":{"id":"IvucAo2lkXc8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":547},"outputId":"1fd97354-f255-44e4-edf8-b9ab1db8fc0b","executionInfo":{"status":"ok","timestamp":1590774912361,"user_tz":-180,"elapsed":1563,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["df_o[['Email', 'Address', 'Avatar']] = ecommerce[['Email', 'Address', 'Avatar']]\n","df_o.head()"],"execution_count":60,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:2963: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[k1] = value[k2]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Avg. Session Length</th>\n","      <th>Time on App</th>\n","      <th>Time on Website</th>\n","      <th>Length of Membership</th>\n","      <th>Yearly Amount Spent</th>\n","      <th>Email</th>\n","      <th>Address</th>\n","      <th>Avatar</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>34.497268</td>\n","      <td>12.655651</td>\n","      <td>39.577668</td>\n","      <td>4.082621</td>\n","      <td>587.951054</td>\n","      <td>mstephenson@fernandez.com</td>\n","      <td>835 Frank Tunnel\\nWrightmouth, MI 82180-9605</td>\n","      <td>Violet</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>31.926272</td>\n","      <td>11.109461</td>\n","      <td>37.268959</td>\n","      <td>2.664034</td>\n","      <td>392.204933</td>\n","      <td>hduke@hotmail.com</td>\n","      <td>4547 Archer Common\\nDiazchester, CA 06566-8576</td>\n","      <td>DarkGreen</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33.000915</td>\n","      <td>11.330278</td>\n","      <td>37.110597</td>\n","      <td>4.104543</td>\n","      <td>487.547505</td>\n","      <td>pallen@yahoo.com</td>\n","      <td>24645 Valerie Unions Suite 582\\nCobbborough, D...</td>\n","      <td>Bisque</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>34.305557</td>\n","      <td>13.717514</td>\n","      <td>36.721283</td>\n","      <td>3.120179</td>\n","      <td>581.852344</td>\n","      <td>riverarebecca@gmail.com</td>\n","      <td>1414 David Throughway\\nPort Jason, OH 22070-1220</td>\n","      <td>SaddleBrown</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33.330673</td>\n","      <td>12.795189</td>\n","      <td>37.536653</td>\n","      <td>4.446308</td>\n","      <td>599.406092</td>\n","      <td>mstephens@davidson-herman.com</td>\n","      <td>14023 Rodriguez Passage\\nPort Jacobville, PR 3...</td>\n","      <td>MediumAquaMarine</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Avg. Session Length  ...            Avatar\n","0            34.497268  ...            Violet\n","1            31.926272  ...         DarkGreen\n","2            33.000915  ...            Bisque\n","3            34.305557  ...       SaddleBrown\n","4            33.330673  ...  MediumAquaMarine\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"5nnRToniXGDK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":812},"outputId":"e7995a10-1f1e-4b77-e130-79c6a64e0fe5","executionInfo":{"status":"error","timestamp":1590775199773,"user_tz":-180,"elapsed":1124,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Ploting the univariate summaries and recording our observations\n","#\n","fig = plt.plot(1,1)\n","\n","sns.barplot(df_o['Length of Membership'].value_counts().keys, df_o['Yearly Amount Spent'].value_counts())\n","plt.xlabel(col, fontsize=16)\n","plt.y_label('Count', fontsize=16)\n","\n","plt.show()"],"execution_count":63,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mcategorical_order\u001b[0;34m(values, order)\u001b[0m\n\u001b[1;32m    543\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 544\u001b[0;31m                 \u001b[0morder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcategories\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    545\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'function' object has no attribute 'cat'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mcategorical_order\u001b[0;34m(values, order)\u001b[0m\n\u001b[1;32m    546\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 547\u001b[0;31m                     \u001b[0morder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    548\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'function' object has no attribute 'unique'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-5f6515d110b0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbarplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_o\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Length of Membership'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_o\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Yearly Amount Spent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Count'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mbarplot\u001b[0;34m(x, y, hue, data, order, hue_order, estimator, ci, n_boot, units, seed, orient, color, palette, saturation, errcolor, errwidth, capsize, dodge, ax, **kwargs)\u001b[0m\n\u001b[1;32m   3145\u001b[0m                           \u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mci\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_boot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3146\u001b[0m                           \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3147\u001b[0;31m                           errcolor, errwidth, capsize, dodge)\n\u001b[0m\u001b[1;32m   3148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3149\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0max\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, hue, data, order, hue_order, estimator, ci, n_boot, units, seed, orient, color, palette, saturation, errcolor, errwidth, capsize, dodge)\u001b[0m\n\u001b[1;32m   1601\u001b[0m         \u001b[0;34m\"\"\"Initialize the plotter.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1602\u001b[0m         self.establish_variables(x, y, hue, data, orient,\n\u001b[0;32m-> 1603\u001b[0;31m                                  order, hue_order, units)\n\u001b[0m\u001b[1;32m   1604\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_colors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1605\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimate_statistic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mci\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_boot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mestablish_variables\u001b[0;34m(self, x, y, hue, data, orient, order, hue_order, units)\u001b[0m\n\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m                 \u001b[0;31m# Get the order on the categorical axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m                 \u001b[0mgroup_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcategorical_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroups\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m                 \u001b[0;31m# Group the numeric data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mcategorical_order\u001b[0;34m(values, order)\u001b[0m\n\u001b[1;32m    547\u001b[0m                     \u001b[0morder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m                     \u001b[0morder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m                     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/algorithms.py\u001b[0m in \u001b[0;36munique\u001b[0;34m(values)\u001b[0m\n\u001b[1;32m    370\u001b[0m     \"\"\"\n\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 372\u001b[0;31m     \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_ensure_arraylike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    373\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_extension_array_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/algorithms.py\u001b[0m in \u001b[0;36m_ensure_arraylike\u001b[0;34m(values)\u001b[0m\n\u001b[1;32m    208\u001b[0m     \"\"\"\n\u001b[1;32m    209\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_array_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 210\u001b[0;31m         \u001b[0minferred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfer_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    211\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minferred\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"mixed\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"string\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"unicode\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.infer_dtype\u001b[0;34m()\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'method' object is not iterable"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"vTbdjSrhVIiT","colab_type":"text"},"source":["## 7. Implementing the Solution"]},{"cell_type":"code","metadata":{"id":"PJLZaRzJXJ3w","colab_type":"code","colab":{}},"source":["# Implementing the Solution\n","# "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lQ2G4ZPDVOXE","colab_type":"text"},"source":["## 8. Challenging the solution"]},{"cell_type":"markdown","metadata":{"id":"jWVGKGuiYMWg","colab_type":"text"},"source":["> The easy solution is nice because it is, well, easy, but you should never allow those results to hold the day. You should always be thinking of ways to challenge the results, especially if those results comport with your prior expectation.\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"j3x3SXZ4XT_L","colab_type":"code","colab":{}},"source":["# Reviewing the Solution \n","#"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xrmHVMVsVS--","colab_type":"text"},"source":["## 9. Follow up questions"]},{"cell_type":"markdown","metadata":{"id":"pth2qSWhuBIy","colab_type":"text"},"source":["> At this point, we can refine our question or collect new data, all in an iterative process to get at the truth.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HPQviDmNtta8","colab_type":"text"},"source":["### a). Did we have the right data?"]},{"cell_type":"markdown","metadata":{"id":"qjFHK1CKty7o","colab_type":"text"},"source":["### b). Do we need other data to answer our question?"]},{"cell_type":"markdown","metadata":{"id":"HSsicSdvt4Zs","colab_type":"text"},"source":["### c). Did we have the right question?"]}]}