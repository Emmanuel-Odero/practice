{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Python Programming: Logistic Regression","provenance":[{"file_id":"1fERHbnlUiDd_z48aO8kv7u5MNQyl1uCx","timestamp":1590663614194}],"collapsed_sections":["XezjT3fkhCBs","pKsPC3hxK_NG","EFzrLVNDLIjx","7dGKfT3sdqSX","Iyd4WJf4dsbc","xjgM28PXduDp","1z5z5tXCdv0t"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"cRpCSZaVdjKL","colab_type":"text"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>"]},{"cell_type":"markdown","metadata":{"id":"9emVViDxK-Dv","colab_type":"text"},"source":["# Python Programming: Logistic Regression"]},{"cell_type":"markdown","metadata":{"id":"XezjT3fkhCBs","colab_type":"text"},"source":["## Importing Our Libraries"]},{"cell_type":"code","metadata":{"id":"dF59ltu_d53K","colab_type":"code","colab":{}},"source":["# Importing our libraries\n","#\n","import pandas as pd\n","import seaborn as sns"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pKsPC3hxK_NG","colab_type":"text"},"source":["## Example "]},{"cell_type":"code","metadata":{"id":"Z-mNUTwkLOHG","colab_type":"code","colab":{}},"source":["# Example 1\n","# ---\n","# You are tasked to complete the analysis of what sorts of people were likely to survive the titanic. \n","# Specifically you are requested to apply logistic regression modelining \n","# to predict which passengers survived the tragedy.\n","# ---\n","# Dataset url = http://bit.ly/TitanicTrainDataset\n","# ---\n","# Survived - Survival (0 = No; 1 = Yes)\n","# Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n","# Name - Name\n","# Sex - Sex\n","# Age - Age\n","# SibSp - Number of Siblings/Spouses Aboard\n","# Parch - Number of Parents/Children Aboard\n","# Ticket - Ticket Number\n","# Fare - Passenger Fare (British pound)\n","# Cabin - Cabin\n","# Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sk2xQb4NO8uG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":496},"outputId":"bf59ad0c-0638-4592-8b8f-b07363e0b016","executionInfo":{"status":"ok","timestamp":1590726209250,"user_tz":-180,"elapsed":5163,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Reading in the dataset using the Pandas\n","# \n","titanic = pd.read_csv(\"http://bit.ly/TitanicTrainDataset\")\n","titanic.columns = ['PassengerId','Survived','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']\n","titanic.head()"],"execution_count":316,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":316}]},{"cell_type":"code","metadata":{"id":"a4sN9vgZPm_0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"9810a896-84cc-4d47-d07c-2bd790fd8bf4","executionInfo":{"status":"ok","timestamp":1590726209251,"user_tz":-180,"elapsed":5132,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking that our target variable is binary\n","# Since we are building a model to predict survival of passangers from the Titanic, \n","# our target is going to be \"Survived\" variable from the titanic dataframe. \n","# To make sure that it's a binary variable, let's use Seaborn's countplot() function.\n","# \n","sns.countplot(x='Survived',data=titanic, palette='hls')\n","\n","# from the output we see that the Survived variable is binary (0 - did not survive / 1 - survived)"],"execution_count":317,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3f78e48>"]},"metadata":{"tags":[]},"execution_count":317},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"5iVwmLx4P6O0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"2a21d758-cb1f-410a-9d06-6c454d4851de","executionInfo":{"status":"ok","timestamp":1590726209254,"user_tz":-180,"elapsed":5084,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for missing values\n","# \n","titanic.isnull().sum()"],"execution_count":318,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":318}]},{"cell_type":"code","metadata":{"id":"9MpmIAioQAoW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":340},"outputId":"853d1a3d-3758-4d3d-bebf-19f3c399c9a3","executionInfo":{"status":"ok","timestamp":1590726209257,"user_tz":-180,"elapsed":5047,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Understanding the dataset abit more\n","# \n","titanic.info()\n","\n","# Ok, so there are only 891 rows in the titanic data frame. \n","# Cabin is almost all missing values, so we can drop that variable completely, \n","# but what about age? Age seems like a relevant predictor for survival right? \n","# We'd want to keep the variables, but it has 177 missing values.\n","# We are going to need to find a way to approximate for those missing values!"],"execution_count":319,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oA0DcqdUQNeP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"7c3e82c9-6bb9-46b1-e903-07cccf309d66","executionInfo":{"status":"ok","timestamp":1590726209259,"user_tz":-180,"elapsed":5006,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Taking care of missing values\n","# So let's just go ahead and drop all the variables that aren't relevant for predicting survival. We should at least keep the following:\n","# ---\n","# Survived - This variable is obviously relevant.\n","# Pclass - Does a passenger's class on the boat affect their survivability?\n","# Sex - Could a passenger's gender impact their survival rate?\n","# Age - Does a person's age impact their survival rate?\n","# SibSp - Does the number of relatives on the boat (that are siblings or a spouse) affect a person survivability? Probability\n","# Parch - Does the number of relatives on the boat (that are children or parents) affect a person survivability? Probability\n","# Fare - Does the fare a person paid effect his survivability? Maybe - let's keep it.\n","# Embarked - Does a person's point of embarkation matter? It depends on how the boat was filled... Let's keep it.\n","# What about a person's name, ticket number, and passenger ID number? They're irrelavant for predicting survivability. \n","# And as we recall, the cabin variable is almost all missing values, so we can just drop all of these.\n","# \n","titanic_data = titanic.drop(['PassengerId','Name','Ticket','Cabin'], 1)\n","titanic_data.head()\n","\n","# Now we have the dataframe reduced down to only relevant variables, but now we need to deal with the missing values in the age variable."],"execution_count":320,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0         0       3    male  22.0      1      0   7.2500        S\n","1         1       1  female  38.0      1      0  71.2833        C\n","2         1       3  female  26.0      0      0   7.9250        S\n","3         1       1  female  35.0      1      0  53.1000        S\n","4         0       3    male  35.0      0      0   8.0500        S"]},"metadata":{"tags":[]},"execution_count":320}]},{"cell_type":"code","metadata":{"id":"KLwcKTchQsyb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"a0b74d12-f7f6-467e-8810-301cbcd50eb8","executionInfo":{"status":"ok","timestamp":1590726210176,"user_tz":-180,"elapsed":5886,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Imputing missing values\n","# ---\n","# Let's look at how passenger age is related to their class as a passenger on the boat.\n","# \n","sns.boxplot(x='Pclass', y='Age', data=titanic_data, palette='hls')"],"execution_count":321,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3ebd9b0>"]},"metadata":{"tags":[]},"execution_count":321},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"oj8v7S1zRruW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"b84bd514-572c-4538-f6ff-457ef7c6ceec","executionInfo":{"status":"ok","timestamp":1590726210181,"user_tz":-180,"elapsed":5844,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["titanic_data.head()\n","\n","# Speaking roughly, we could say that the younger a passenger is, the more likely it is for them to be in 3rd class. \n","# The older a passenger is, the more likely it is for them to be in 1st class. \n","# So there is a loose relationship between these variables. \n","# So, let's write a function that approximates a passengers age, based on their class. \n","# From the box plot, it looks like the average age of 1st class passengers \n","# is about 37, 2nd class passengers is 29, and 3rd class pasengers is 24."],"execution_count":322,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0         0       3    male  22.0      1      0   7.2500        S\n","1         1       1  female  38.0      1      0  71.2833        C\n","2         1       3  female  26.0      0      0   7.9250        S\n","3         1       1  female  35.0      1      0  53.1000        S\n","4         0       3    male  35.0      0      0   8.0500        S"]},"metadata":{"tags":[]},"execution_count":322}]},{"cell_type":"code","metadata":{"id":"SedrD9NKR600","colab_type":"code","colab":{}},"source":["# So let's write a function that finds each null value in the Age variable, and for each null, \n","# checks the value of the Pclass and assigns an age value according to the average age of passengers in that class.\n","#\n","def age_approx(cols):\n","    Age = cols[0]\n","    Pclass = cols[1]\n","    \n","    if pd.isnull(Age):\n","        if Pclass == 1:\n","            return 37\n","        elif Pclass == 2:\n","            return 29\n","        else:\n","            return 24\n","    else:\n","        return Age"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YXkyX36GSPif","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"f692ff99-8b83-4462-9531-973040aba62f","executionInfo":{"status":"ok","timestamp":1590726210185,"user_tz":-180,"elapsed":5795,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# When we apply the function and check again for null values, we see that there are no more null values in the age variable.\n","#\n","titanic_data['Age'] = titanic_data[['Age', 'Pclass']].apply(age_approx, axis=1)\n","titanic_data.isnull().sum()"],"execution_count":324,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived    0\n","Pclass      0\n","Sex         0\n","Age         0\n","SibSp       0\n","Parch       0\n","Fare        0\n","Embarked    2\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":324}]},{"cell_type":"code","metadata":{"id":"MwNxUew_SaR-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"31bf5204-cb97-436e-abd6-81e7a6d2c9e1","executionInfo":{"status":"ok","timestamp":1590726210186,"user_tz":-180,"elapsed":5772,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# There are 2 null values in the embarked variable. We can drop those 2 records \n","# without loosing too much important information from our dataset, so we will do that.\n","#\n","titanic_data.dropna(inplace=True)\n","titanic_data.isnull().sum()"],"execution_count":325,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Survived    0\n","Pclass      0\n","Sex         0\n","Age         0\n","SibSp       0\n","Parch       0\n","Fare        0\n","Embarked    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":325}]},{"cell_type":"code","metadata":{"id":"6jhIXEFoSoUm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"5d3003d5-3834-4eae-c598-52de6e701148","executionInfo":{"status":"ok","timestamp":1590726210187,"user_tz":-180,"elapsed":5747,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Converting categorical variables to a dummy indicators\n","# ---\n","# The next thing we need to do is reformat our variables so that they work with the model. \n","# Specifically, we need to reformat the Sex and Embarked variables into numeric variables.\n","#\n","gender = pd.get_dummies(titanic_data['Sex'],drop_first=False)\n","gender.head()"],"execution_count":326,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>female</th>\n","      <th>male</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   female  male\n","0       0     1\n","1       1     0\n","2       1     0\n","3       1     0\n","4       0     1"]},"metadata":{"tags":[]},"execution_count":326}]},{"cell_type":"code","metadata":{"id":"H0r2ChhLS-ZB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"8b2cc902-b562-430a-8efc-3aec0851c3a8","executionInfo":{"status":"ok","timestamp":1590726210188,"user_tz":-180,"elapsed":5724,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["embark_location = pd.get_dummies(titanic_data['Embarked'],drop_first=False)\n","embark_location.head()"],"execution_count":327,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>C</th>\n","      <th>Q</th>\n","      <th>S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   C  Q  S\n","0  0  0  1\n","1  1  0  0\n","2  0  0  1\n","3  0  0  1\n","4  0  0  1"]},"metadata":{"tags":[]},"execution_count":327}]},{"cell_type":"code","metadata":{"id":"Hwg1_Md9S_GP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"666edd2a-9750-451f-f8c0-6950e99f8aa5","executionInfo":{"status":"ok","timestamp":1590726210189,"user_tz":-180,"elapsed":5702,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["titanic_data.head()"],"execution_count":328,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n","0         0       3    male  22.0      1      0   7.2500        S\n","1         1       1  female  38.0      1      0  71.2833        C\n","2         1       3  female  26.0      0      0   7.9250        S\n","3         1       1  female  35.0      1      0  53.1000        S\n","4         0       3    male  35.0      0      0   8.0500        S"]},"metadata":{"tags":[]},"execution_count":328}]},{"cell_type":"code","metadata":{"id":"RezYZSHpTCLb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"d16f1423-45e0-45f8-af45-d3023bdaea7b","executionInfo":{"status":"ok","timestamp":1590726210190,"user_tz":-180,"elapsed":5668,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["titanic_data.drop(['Sex', 'Embarked'],axis=1,inplace=True)\n","titanic_data.head()"],"execution_count":329,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass   Age  SibSp  Parch     Fare\n","0         0       3  22.0      1      0   7.2500\n","1         1       1  38.0      1      0  71.2833\n","2         1       3  26.0      0      0   7.9250\n","3         1       1  35.0      1      0  53.1000\n","4         0       3  35.0      0      0   8.0500"]},"metadata":{"tags":[]},"execution_count":329}]},{"cell_type":"code","metadata":{"id":"hmT38it8TLnZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"3ca9ed1e-e3c7-43c3-b1bc-eda0eaade3a8","executionInfo":{"status":"ok","timestamp":1590726210191,"user_tz":-180,"elapsed":5633,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["titanic_dmy = pd.concat([titanic_data,gender,embark_location],axis=1)\n","titanic_dmy.head()\n","\n","# Now we have a dataset with all the variables in the correct format!"],"execution_count":330,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>female</th>\n","      <th>male</th>\n","      <th>C</th>\n","      <th>Q</th>\n","      <th>S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass   Age  SibSp  Parch     Fare  female  male  C  Q  S\n","0         0       3  22.0      1      0   7.2500       0     1  0  0  1\n","1         1       1  38.0      1      0  71.2833       1     0  1  0  0\n","2         1       3  26.0      0      0   7.9250       1     0  0  0  1\n","3         1       1  35.0      1      0  53.1000       1     0  0  0  1\n","4         0       3  35.0      0      0   8.0500       0     1  0  0  1"]},"metadata":{"tags":[]},"execution_count":330}]},{"cell_type":"code","metadata":{"id":"iRnGw9P5TUHn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":320},"outputId":"d83059e2-392d-41a8-f04d-83a4f58f71b8","executionInfo":{"status":"ok","timestamp":1590726210192,"user_tz":-180,"elapsed":5579,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for independence between features¶\n","# \n","sns.heatmap(titanic_dmy.corr())  "],"execution_count":331,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3e49630>"]},"metadata":{"tags":[]},"execution_count":331},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"SdoW2nFfTgGv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"df7ba700-9501-4c31-eb2c-7f16f14c6453","executionInfo":{"status":"ok","timestamp":1590726210194,"user_tz":-180,"elapsed":5542,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Fare and Pclass are not independent of each other, so I am going to drop these.\n","# \n","titanic_dmy.drop(['Fare', 'Pclass'],axis=1,inplace=True)\n","titanic_dmy.head()"],"execution_count":332,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>female</th>\n","      <th>male</th>\n","      <th>C</th>\n","      <th>Q</th>\n","      <th>S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived   Age  SibSp  Parch  female  male  C  Q  S\n","0         0  22.0      1      0       0     1  0  0  1\n","1         1  38.0      1      0       1     0  1  0  0\n","2         1  26.0      0      0       1     0  0  0  1\n","3         1  35.0      1      0       1     0  0  0  1\n","4         0  35.0      0      0       0     1  0  0  1"]},"metadata":{"tags":[]},"execution_count":332}]},{"cell_type":"code","metadata":{"id":"xl8GC-m9TrxR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"outputId":"e305eec9-9b67-45bb-b230-47bb2cedcf86","executionInfo":{"status":"ok","timestamp":1590726210195,"user_tz":-180,"elapsed":5504,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking that your dataset size is sufficient\n","# We have 6 predictive features that remain. The rule of thumb is 50 records per feature \n","# so we need to have at least 300 records in this dataset. Let's check again.\n","#\n","titanic_dmy.info()\n","\n","titanic_dmy.shape            \n","# From the output we have 889 records so we are fine."],"execution_count":333,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 889 entries, 0 to 890\n","Data columns (total 9 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Survived  889 non-null    int64  \n"," 1   Age       889 non-null    float64\n"," 2   SibSp     889 non-null    int64  \n"," 3   Parch     889 non-null    int64  \n"," 4   female    889 non-null    uint8  \n"," 5   male      889 non-null    uint8  \n"," 6   C         889 non-null    uint8  \n"," 7   Q         889 non-null    uint8  \n"," 8   S         889 non-null    uint8  \n","dtypes: float64(1), int64(3), uint8(5)\n","memory usage: 39.1 KB\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(889, 9)"]},"metadata":{"tags":[]},"execution_count":333}]},{"cell_type":"code","metadata":{"id":"WhQRrUBIUeyb","colab_type":"code","colab":{}},"source":["# Splitting our dataset\n","#\n","X = titanic_dmy.drop(\"Survived\",axis=1)\n","y = titanic_dmy[\"Survived\"]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3, random_state=25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UZszdX9MU1Dl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"4afecfce-bce7-41bf-f6da-f5e0e38ed979","executionInfo":{"status":"ok","timestamp":1590726210198,"user_tz":-180,"elapsed":5448,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Fitting our model\n","# \n","from sklearn.linear_model import LogisticRegression\n","\n","LogReg = LogisticRegression()\n","LogReg.fit(X_train, y_train)"],"execution_count":335,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":335}]},{"cell_type":"code","metadata":{"id":"hLPYeh2_VHVP","colab_type":"code","colab":{}},"source":["# Using our model to make a prediction\n","#\n","y_pred = LogReg.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"f7ZstfD8VKM_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"3362d21f-b72b-42a2-fdf5-007f56228bc2","executionInfo":{"status":"ok","timestamp":1590726210201,"user_tz":-180,"elapsed":5363,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Evaluating the model\n","#\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix = confusion_matrix(y_test, y_pred)\n","confusion_matrix\n","\n","# The results from the confusion matrix tell us that 137 and 69 are the number of correct predictions. \n","# 34 and 27 are the number of incorrect predictions."],"execution_count":337,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[137,  27],\n","       [ 34,  69]])"]},"metadata":{"tags":[]},"execution_count":337}]},{"cell_type":"markdown","metadata":{"id":"EFzrLVNDLIjx","colab_type":"text"},"source":["## <font color=\"green\">Challenge 1</font>"]},{"cell_type":"code","metadata":{"id":"wdxxtSRnK2_o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"c43fe664-ff80-4c43-cf58-330978df05b7","executionInfo":{"status":"ok","timestamp":1590726210202,"user_tz":-180,"elapsed":5320,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Challenge 1\n","# ---\n","# Question: Use the Iris dataset to build a regression model to predict the type of iris flower\n","# ---\n","# Dataset url = http://bit.ly/IrisDataset\n","# ---\n","#\n","iris = pd.read_csv(\"IRIS.csv\")\n","iris.head()"],"execution_count":338,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal_length  sepal_width  petal_length  petal_width      species\n","0           5.1          3.5           1.4          0.2  Iris-setosa\n","1           4.9          3.0           1.4          0.2  Iris-setosa\n","2           4.7          3.2           1.3          0.2  Iris-setosa\n","3           4.6          3.1           1.5          0.2  Iris-setosa\n","4           5.0          3.6           1.4          0.2  Iris-setosa"]},"metadata":{"tags":[]},"execution_count":338}]},{"cell_type":"code","metadata":{"id":"_1eSNMW8na90","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"73de45a4-74d3-49bf-c560-ac7badc04f55","executionInfo":{"status":"ok","timestamp":1590726211046,"user_tz":-180,"elapsed":6072,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking that our target variables\n","#\n","sns.countplot(x=iris[\"species\"], data=iris, palette='hls')"],"execution_count":339,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3d9d128>"]},"metadata":{"tags":[]},"execution_count":339},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"4nNiqdflVPtg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"226aacb3-71bf-465a-98a1-ddd032d63305","executionInfo":{"status":"ok","timestamp":1590726211048,"user_tz":-180,"elapsed":6009,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for missing values\n","#\n","iris.isnull().sum()"],"execution_count":340,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal_length    0\n","sepal_width     0\n","petal_length    0\n","petal_width     0\n","species         0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":340}]},{"cell_type":"code","metadata":{"id":"0h6MguMSWY9C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":221},"outputId":"a3bfea00-e447-444a-a418-99fc21c2aeb9","executionInfo":{"status":"ok","timestamp":1590726211050,"user_tz":-180,"elapsed":5957,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking the data information\n","#\n","iris.info()"],"execution_count":341,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 150 entries, 0 to 149\n","Data columns (total 5 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   sepal_length  150 non-null    float64\n"," 1   sepal_width   150 non-null    float64\n"," 2   petal_length  150 non-null    float64\n"," 3   petal_width   150 non-null    float64\n"," 4   species       150 non-null    object \n","dtypes: float64(4), object(1)\n","memory usage: 6.0+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hcg1DR3FWhDu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"bdf58b97-df8b-4cb6-90df-239aa7ea113a","executionInfo":{"status":"ok","timestamp":1590726211052,"user_tz":-180,"elapsed":5922,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Boxplots \n","#\n","sns.boxplot(x=iris['sepal_length'], palette='hls')"],"execution_count":342,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf472c4a8>"]},"metadata":{"tags":[]},"execution_count":342},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"MgKw14oJXk9O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"3107a96c-1896-42d6-8a33-7270c4562875","executionInfo":{"status":"ok","timestamp":1590726211053,"user_tz":-180,"elapsed":5862,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.boxplot(x=iris['sepal_width'], palette='hls')"],"execution_count":343,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf45ef518>"]},"metadata":{"tags":[]},"execution_count":343},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ow_TadzqXn2c","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"02a3b072-690d-45a5-c57f-19b11c056caf","executionInfo":{"status":"ok","timestamp":1590726211056,"user_tz":-180,"elapsed":5803,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.boxplot(x=iris['petal_length'], palette='hls')"],"execution_count":344,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3c8fc88>"]},"metadata":{"tags":[]},"execution_count":344},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"eN5n1HNJXrBP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"ba6c8332-ba6f-4529-b165-41d3bf59e51f","executionInfo":{"status":"ok","timestamp":1590726211058,"user_tz":-180,"elapsed":5707,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.boxplot(x=iris['petal_width'], palette='hls')"],"execution_count":345,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3cbbda0>"]},"metadata":{"tags":[]},"execution_count":345},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"vGLe6J1FYRnx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"7544c065-8b9c-419b-d5b5-81ebe0a04b89","executionInfo":{"status":"ok","timestamp":1590726211059,"user_tz":-180,"elapsed":5661,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["iris.head()"],"execution_count":346,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal_length  sepal_width  petal_length  petal_width      species\n","0           5.1          3.5           1.4          0.2  Iris-setosa\n","1           4.9          3.0           1.4          0.2  Iris-setosa\n","2           4.7          3.2           1.3          0.2  Iris-setosa\n","3           4.6          3.1           1.5          0.2  Iris-setosa\n","4           5.0          3.6           1.4          0.2  Iris-setosa"]},"metadata":{"tags":[]},"execution_count":346}]},{"cell_type":"code","metadata":{"id":"nbLiS8GMXt5b","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":287},"outputId":"d0a2bd0c-5a2c-4ab0-d910-94d8f7e05282","executionInfo":{"status":"ok","timestamp":1590726211977,"user_tz":-180,"elapsed":6529,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Cheking the independence between the features\n","#\n","numeric = iris.iloc[:, :4]\n","sns.heatmap(numeric.corr())"],"execution_count":347,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3bd19e8>"]},"metadata":{"tags":[]},"execution_count":347},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"U4FmqRLvY46f","colab_type":"text"},"source":["We can clearly see that the sepal width is not correlated to the other independent variables."]},{"cell_type":"code","metadata":{"id":"KR_4nNDYZBtX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"258e1993-d0c9-43d9-d47a-dcab2a23cf2e","executionInfo":{"status":"ok","timestamp":1590726211982,"user_tz":-180,"elapsed":6481,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Sepal width is not intedependent with the other variables so we drop it\n","#\n","numeric.drop(['sepal_width'], axis=1, inplace=True)\n","numeric.head()"],"execution_count":348,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal_length  petal_length  petal_width\n","0           5.1           1.4          0.2\n","1           4.9           1.4          0.2\n","2           4.7           1.3          0.2\n","3           4.6           1.5          0.2\n","4           5.0           1.4          0.2"]},"metadata":{"tags":[]},"execution_count":348}]},{"cell_type":"code","metadata":{"id":"NHLUdM1iZqel","colab_type":"code","colab":{}},"source":["# Splitting the dataset\n","#\n","X = numeric\n","y = iris['species']\n","\n","from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=25)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9KpiOG2vZ17x","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"18e4f719-d808-4281-d475-09997c48842e","executionInfo":{"status":"ok","timestamp":1590726211988,"user_tz":-180,"elapsed":6427,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Fitting our model\n","#\n","from sklearn.linear_model import LogisticRegression\n","\n","LogReg = LogisticRegression()\n","LogReg.fit(X_train, y_train)"],"execution_count":350,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":350}]},{"cell_type":"code","metadata":{"id":"_4CXo7aZazUT","colab_type":"code","colab":{}},"source":["# Using our model to make a prediction\n","#\n","y_pred = LogReg.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kf-RwE79a-qH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"f32b3931-2212-4fb6-b56d-ec4004ca0220","executionInfo":{"status":"ok","timestamp":1590726211990,"user_tz":-180,"elapsed":6362,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Evaluating the model\n","#\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix = confusion_matrix(y_test, y_pred)\n","confusion_matrix\n","\n","# The results from the confusion matrix tell us that 17, 15 and 12 are the number of correct predictions. \n","# 1 is the number of incorrect predictions."],"execution_count":352,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[17,  0,  0],\n","       [ 0, 15,  1],\n","       [ 0,  0, 12]])"]},"metadata":{"tags":[]},"execution_count":352}]},{"cell_type":"markdown","metadata":{"id":"7dGKfT3sdqSX","colab_type":"text"},"source":["## <font color=\"green\">Challenge 2</font>"]},{"cell_type":"code","metadata":{"id":"6ViMfWEMLWDG","colab_type":"code","colab":{}},"source":["# Challenge 2\n","# ---\n","# Question: Create a regression model that can predict whether an application will be admitted to the university or not.\n","# ---\n","# Dataset url = http://bit.ly/MarksDataset\n","# ---\n","#"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iyd4WJf4dsbc","colab_type":"text"},"source":["## <font color=\"green\">Challenge 3</font>"]},{"cell_type":"code","metadata":{"id":"N4mB1XxvLYAY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"outputId":"72897275-1264-4ca5-df49-35ca162a1c12","executionInfo":{"status":"ok","timestamp":1590726212003,"user_tz":-180,"elapsed":6294,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Challenge 3\n","# ---\n","# Question: Predict if the client will subscribe a term deposit (variable y).\n","# ---\n","# Dataset url = http://bit.ly/BankingDataset\n","# ---\n","# \n","bank = pd.read_csv('banking.csv')\n","bank.head()"],"execution_count":354,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>month</th>\n","      <th>day_of_week</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>emp_var_rate</th>\n","      <th>cons_price_idx</th>\n","      <th>cons_conf_idx</th>\n","      <th>euribor3m</th>\n","      <th>nr_employed</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>44</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>basic.4y</td>\n","      <td>unknown</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>aug</td>\n","      <td>thu</td>\n","      <td>210</td>\n","      <td>1</td>\n","      <td>999</td>\n","      <td>0</td>\n","      <td>nonexistent</td>\n","      <td>1.4</td>\n","      <td>93.444</td>\n","      <td>-36.1</td>\n","      <td>4.963</td>\n","      <td>5228.1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>53</td>\n","      <td>technician</td>\n","      <td>married</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>nov</td>\n","      <td>fri</td>\n","      <td>138</td>\n","      <td>1</td>\n","      <td>999</td>\n","      <td>0</td>\n","      <td>nonexistent</td>\n","      <td>-0.1</td>\n","      <td>93.200</td>\n","      <td>-42.0</td>\n","      <td>4.021</td>\n","      <td>5195.8</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>management</td>\n","      <td>single</td>\n","      <td>university.degree</td>\n","      <td>no</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>jun</td>\n","      <td>thu</td>\n","      <td>339</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>success</td>\n","      <td>-1.7</td>\n","      <td>94.055</td>\n","      <td>-39.8</td>\n","      <td>0.729</td>\n","      <td>4991.6</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>39</td>\n","      <td>services</td>\n","      <td>married</td>\n","      <td>high.school</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>apr</td>\n","      <td>fri</td>\n","      <td>185</td>\n","      <td>2</td>\n","      <td>999</td>\n","      <td>0</td>\n","      <td>nonexistent</td>\n","      <td>-1.8</td>\n","      <td>93.075</td>\n","      <td>-47.1</td>\n","      <td>1.405</td>\n","      <td>5099.1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>55</td>\n","      <td>retired</td>\n","      <td>married</td>\n","      <td>basic.4y</td>\n","      <td>no</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>aug</td>\n","      <td>fri</td>\n","      <td>137</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>success</td>\n","      <td>-2.9</td>\n","      <td>92.201</td>\n","      <td>-31.4</td>\n","      <td>0.869</td>\n","      <td>5076.2</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   age          job  marital  ... euribor3m nr_employed  y\n","0   44  blue-collar  married  ...     4.963      5228.1  0\n","1   53   technician  married  ...     4.021      5195.8  0\n","2   28   management   single  ...     0.729      4991.6  1\n","3   39     services  married  ...     1.405      5099.1  0\n","4   55      retired  married  ...     0.869      5076.2  1\n","\n","[5 rows x 21 columns]"]},"metadata":{"tags":[]},"execution_count":354}]},{"cell_type":"code","metadata":{"id":"gGw-tWBbldhh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"outputId":"a4ccdf52-f987-49ef-eda1-6c5290129a22","executionInfo":{"status":"ok","timestamp":1590726212004,"user_tz":-180,"elapsed":6265,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Identify categorical columns and create a list of them\n","#\n","categorical = bank.dtypes ==object\n","cat_cols = bank.columns[categorical].tolist()\n","print(f\"Categorical columns are: \\n{cat_cols}\")"],"execution_count":355,"outputs":[{"output_type":"stream","text":["Categorical columns are: \n","['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xjgM28PXduDp","colab_type":"text"},"source":["## <font color=\"green\">Challenge 4</font>"]},{"cell_type":"code","metadata":{"id":"Cjm8P2ynLZbt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"2ff97021-659a-4844-a708-50fe29d3e88c","executionInfo":{"status":"ok","timestamp":1590726212800,"user_tz":-180,"elapsed":7004,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Challenge 4\n","# ---\n","# Question: Create a logistic regression model determine whether a user purchased a particular product.\n","# ---\n","# Dataset url = http://bit.ly/SocialNetworkAdsDataset\n","# ---\n","#\n","ads = pd.read_csv(\"http://bit.ly/SocialNetworkAdsDataset\")\n","ads.head()"],"execution_count":356,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510    Male   19            19000          0\n","1  15810944    Male   35            20000          0\n","2  15668575  Female   26            43000          0\n","3  15603246  Female   27            57000          0\n","4  15804002    Male   19            76000          0"]},"metadata":{"tags":[]},"execution_count":356}]},{"cell_type":"code","metadata":{"id":"hOX4-0pEjJEM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"f0f00ab3-e9fe-4d8b-b616-f3397ae3726e","executionInfo":{"status":"ok","timestamp":1590726212802,"user_tz":-180,"elapsed":6952,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["from sklearn.preprocessing import LabelEncoder\n","\n","le_ = LabelEncoder()\n","\n","ads['Gender'] = le_.fit_transform(ads.Gender)\n","ads.head()"],"execution_count":357,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased\n","0  15624510       1   19            19000          0\n","1  15810944       1   35            20000          0\n","2  15668575       0   26            43000          0\n","3  15603246       0   27            57000          0\n","4  15804002       1   19            76000          0"]},"metadata":{"tags":[]},"execution_count":357}]},{"cell_type":"code","metadata":{"id":"Wisc_er9jjds","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"808b5851-7bb7-4368-8ee8-1e99b518cb2c","executionInfo":{"status":"ok","timestamp":1590726212804,"user_tz":-180,"elapsed":6901,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["from sklearn.preprocessing import OneHotEncoder\n","\n","ohe_ = OneHotEncoder()\n","\n","gender = ohe_.fit_transform(ads.Gender.values.reshape(-1,1)).toarray()\n","gender"],"execution_count":358,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       [0., 1.],\n","       [1., 0.]])"]},"metadata":{"tags":[]},"execution_count":358}]},{"cell_type":"code","metadata":{"id":"b_sJZxdmj2Ku","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"a90f9e24-1cc5-4fbe-f5a0-ff46c1c21645","executionInfo":{"status":"ok","timestamp":1590726212805,"user_tz":-180,"elapsed":6847,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Add back to the original dataframe\n","#\n","adsOneHot = pd.DataFrame(gender, columns=['Gender_' + str(int(i)) for i in range(gender.shape[1])])\n","ads = pd.concat([ads, adsOneHot], axis=1)\n","ads.head()"],"execution_count":359,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","      <th>Gender_0</th>\n","      <th>Gender_1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>0</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>1</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Gender  Age  EstimatedSalary  Purchased  Gender_0  Gender_1\n","0  15624510       1   19            19000          0       0.0       1.0\n","1  15810944       1   35            20000          0       0.0       1.0\n","2  15668575       0   26            43000          0       1.0       0.0\n","3  15603246       0   27            57000          0       1.0       0.0\n","4  15804002       1   19            76000          0       0.0       1.0"]},"metadata":{"tags":[]},"execution_count":359}]},{"cell_type":"code","metadata":{"id":"OgcQIsM7kgHs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"8fb17608-a4e7-475d-eb1b-9ac3ec8e9b0a","executionInfo":{"status":"ok","timestamp":1590726212806,"user_tz":-180,"elapsed":6793,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.countplot(x='Purchased',data=ads, palette='hls')"],"execution_count":360,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3b09a20>"]},"metadata":{"tags":[]},"execution_count":360},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"KAyEulJjks59","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"outputId":"b764b4ed-83b1-453d-9fce-e4b5818717e1","executionInfo":{"status":"ok","timestamp":1590726212808,"user_tz":-180,"elapsed":6764,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for missing values\n","# \n","ads.isnull().sum()"],"execution_count":361,"outputs":[{"output_type":"execute_result","data":{"text/plain":["User ID            0\n","Gender             0\n","Age                0\n","EstimatedSalary    0\n","Purchased          0\n","Gender_0           0\n","Gender_1           0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":361}]},{"cell_type":"code","metadata":{"id":"QpuK-a0Ckvby","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"96e6b1c8-05ef-48db-d710-5f474f3a279c","executionInfo":{"status":"ok","timestamp":1590726212809,"user_tz":-180,"elapsed":6737,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for the info\n","# \n","ads.info()"],"execution_count":362,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 400 entries, 0 to 399\n","Data columns (total 7 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   User ID          400 non-null    int64  \n"," 1   Gender           400 non-null    int64  \n"," 2   Age              400 non-null    int64  \n"," 3   EstimatedSalary  400 non-null    int64  \n"," 4   Purchased        400 non-null    int64  \n"," 5   Gender_0         400 non-null    float64\n"," 6   Gender_1         400 non-null    float64\n","dtypes: float64(2), int64(5)\n","memory usage: 22.0 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sEKkxBXFk3bZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"a06d342b-53ae-4435-e816-60706689fb2f","executionInfo":{"status":"ok","timestamp":1590726212810,"user_tz":-180,"elapsed":6710,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Plotting boxplots of the relationship between Purchased and salary\n","#\n","sns.boxplot(x='Purchased', y='EstimatedSalary', data=ads, palette='hls')"],"execution_count":363,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3ad3b38>"]},"metadata":{"tags":[]},"execution_count":363},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gX3HRmKelgOZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"2a8586c4-aebc-496d-b1f5-9d570870b1f3","executionInfo":{"status":"ok","timestamp":1590726212812,"user_tz":-180,"elapsed":6682,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Plotting boxplots of the relationship between Purchased and Age\n","#\n","sns.boxplot(x='Purchased', y='Age', data=ads, palette='hls')"],"execution_count":364,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3a52978>"]},"metadata":{"tags":[]},"execution_count":364},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"0u4E06TKl4ZP","colab_type":"code","colab":{}},"source":["ads.drop('Gender', axis=1, inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z8zmiZGElrIH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":142},"outputId":"8e0ca48b-6a8a-4a23-879f-bba291b2533f","executionInfo":{"status":"ok","timestamp":1590726212814,"user_tz":-180,"elapsed":6646,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["ads.head(3)"],"execution_count":366,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","      <th>Gender_0</th>\n","      <th>Gender_1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    User ID  Age  EstimatedSalary  Purchased  Gender_0  Gender_1\n","0  15624510   19            19000          0       0.0       1.0\n","1  15810944   35            20000          0       0.0       1.0\n","2  15668575   26            43000          0       1.0       0.0"]},"metadata":{"tags":[]},"execution_count":366}]},{"cell_type":"code","metadata":{"id":"avs5jbl9ltet","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":358},"outputId":"4ad8ba5a-d04e-4144-b596-01d1c5a98aff","executionInfo":{"status":"ok","timestamp":1590726213497,"user_tz":-180,"elapsed":7301,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for independence between features¶\n","# \n","sns.heatmap(ads.corr())  "],"execution_count":367,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf39c60b8>"]},"metadata":{"tags":[]},"execution_count":367},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Hg1aU8pImJZA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"f9e4333e-3c64-42b5-ba39-645aced30dd4","executionInfo":{"status":"ok","timestamp":1590726213502,"user_tz":-180,"elapsed":7271,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Checking for the dataframe size\n","#\n","ads.shape"],"execution_count":368,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(400, 6)"]},"metadata":{"tags":[]},"execution_count":368}]},{"cell_type":"code","metadata":{"id":"1RbS_4iVmTkR","colab_type":"code","colab":{}},"source":["# Splitting our dataset\n","#\n","X = ads.drop(\"Purchased\",axis=1)\n","y = ads[\"Purchased\"]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3, random_state=25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V6CRILzamehl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"31cad084-9ff6-4323-fe04-cbdc0163c6a1","executionInfo":{"status":"ok","timestamp":1590726213505,"user_tz":-180,"elapsed":7207,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Fitting our model\n","# \n","from sklearn.linear_model import LogisticRegression\n","\n","LogReg = LogisticRegression()\n","LogReg.fit(X_train, y_train)"],"execution_count":370,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":370}]},{"cell_type":"code","metadata":{"id":"3ocXAFcMmjEP","colab_type":"code","colab":{}},"source":["# Using our model to make a prediction\n","#\n","y_pred = LogReg.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8iw0ohkummMc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"d137ebbb-ed56-465f-eb72-04598e4b159c","executionInfo":{"status":"ok","timestamp":1590726213508,"user_tz":-180,"elapsed":7164,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Evaluating the model\n","#\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix = confusion_matrix(y_test, y_pred)\n","confusion_matrix\n","\n","# The results from the confusion matrix tell us that 75 and 19 are the number of correct predictions. \n","# 24 and 2 are the number of incorrect predictions."],"execution_count":372,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[75,  2],\n","       [24, 19]])"]},"metadata":{"tags":[]},"execution_count":372}]},{"cell_type":"markdown","metadata":{"id":"1z5z5tXCdv0t","colab_type":"text"},"source":["## <font color=\"green\">Challenge 5</font>"]},{"cell_type":"code","metadata":{"id":"B3gw8LlVLapg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"0f9abc6b-8c84-4075-f056-a18d782d6080","executionInfo":{"status":"ok","timestamp":1590726213510,"user_tz":-180,"elapsed":7132,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Challenge 5\n","# ---\n","# Question: Create model to determine whether a student will default on their student loans.\n","# ---\n","# Dataset url = http://bit.ly/StudentDefaultDataset\n","# ---\n","loans = pd.read_csv(\"http://bit.ly/StudentDefaultDataset\")\n","loans.head()"],"execution_count":373,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>default</th>\n","      <th>student</th>\n","      <th>balance</th>\n","      <th>income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>729.526495</td>\n","      <td>44361.625074</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>No</td>\n","      <td>Yes</td>\n","      <td>817.180407</td>\n","      <td>12106.134700</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>1073.549164</td>\n","      <td>31767.138947</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>529.250605</td>\n","      <td>35704.493935</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>785.655883</td>\n","      <td>38463.495879</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  default student      balance        income\n","0      No      No   729.526495  44361.625074\n","1      No     Yes   817.180407  12106.134700\n","2      No      No  1073.549164  31767.138947\n","3      No      No   529.250605  35704.493935\n","4      No      No   785.655883  38463.495879"]},"metadata":{"tags":[]},"execution_count":373}]},{"cell_type":"code","metadata":{"id":"fOcJTh8to8Oz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"fe5177be-a79c-4835-8b20-0aff24daf1eb","executionInfo":{"status":"ok","timestamp":1590726213519,"user_tz":-180,"elapsed":7103,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Identify categorical columns and create a list of them\n","#\n","categorical = loans.dtypes ==object\n","cat_cols = loans.columns[categorical].tolist()\n","print(f\"Categorical columns are: \\n{cat_cols}\")"],"execution_count":374,"outputs":[{"output_type":"stream","text":["Categorical columns are: \n","['default', 'student']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"K3Oyohu2m3FM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"dac8f803-21e1-4304-8089-20154d903a93","executionInfo":{"status":"ok","timestamp":1590726214859,"user_tz":-180,"elapsed":8409,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["from sklearn.preprocessing import LabelEncoder\n","\n","le_ = LabelEncoder()\n","\n","loans['default'] = le_.fit_transform(loans.default)\n","\n","loans['student'] = le_.fit_transform(loans.student)\n","loans.head()"],"execution_count":375,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>default</th>\n","      <th>student</th>\n","      <th>balance</th>\n","      <th>income</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>729.526495</td>\n","      <td>44361.625074</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>817.180407</td>\n","      <td>12106.134700</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1073.549164</td>\n","      <td>31767.138947</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>529.250605</td>\n","      <td>35704.493935</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>785.655883</td>\n","      <td>38463.495879</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   default  student      balance        income\n","0        0        0   729.526495  44361.625074\n","1        0        1   817.180407  12106.134700\n","2        0        0  1073.549164  31767.138947\n","3        0        0   529.250605  35704.493935\n","4        0        0   785.655883  38463.495879"]},"metadata":{"tags":[]},"execution_count":375}]},{"cell_type":"code","metadata":{"id":"cMkR139Io0aD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"outputId":"b8a95e16-d63b-4ab4-ee94-77a70f08d091","executionInfo":{"status":"ok","timestamp":1590726214861,"user_tz":-180,"elapsed":8367,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["from sklearn.preprocessing import OneHotEncoder\n","\n","ohe_ = OneHotEncoder()\n","\n","default = ohe_.fit_transform(loans.default.values.reshape(-1,1)).toarray()\n","default\n","\n","student = ohe_.fit_transform(loans.student.values.reshape(-1,1)).toarray()\n","student"],"execution_count":376,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 0.],\n","       [0., 1.],\n","       [1., 0.],\n","       ...,\n","       [1., 0.],\n","       [1., 0.],\n","       [0., 1.]])"]},"metadata":{"tags":[]},"execution_count":376}]},{"cell_type":"code","metadata":{"id":"g4HhbWPYpQZL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"outputId":"a73f3556-db0d-4674-d6da-31601a560dc8","executionInfo":{"status":"ok","timestamp":1590726214862,"user_tz":-180,"elapsed":8330,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Add back to the original dataframe\n","#\n","adsOneHot = pd.DataFrame(default, columns=['default_' + str(int(i)) for i in range(gender.shape[1])])\n","loans = pd.concat([loans, adsOneHot], axis=1)\n","adsOneHot = pd.DataFrame(student, columns=['Student_' + str(int(i)) for i in range(gender.shape[1])])\n","loans = pd.concat([loans, adsOneHot], axis=1)\n","loans.head()"],"execution_count":377,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>default</th>\n","      <th>student</th>\n","      <th>balance</th>\n","      <th>income</th>\n","      <th>default_0</th>\n","      <th>default_1</th>\n","      <th>Student_0</th>\n","      <th>Student_1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>729.526495</td>\n","      <td>44361.625074</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>817.180407</td>\n","      <td>12106.134700</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1073.549164</td>\n","      <td>31767.138947</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>529.250605</td>\n","      <td>35704.493935</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>785.655883</td>\n","      <td>38463.495879</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   default  student      balance  ...  default_1  Student_0  Student_1\n","0        0        0   729.526495  ...        0.0        1.0        0.0\n","1        0        1   817.180407  ...        0.0        0.0        1.0\n","2        0        0  1073.549164  ...        0.0        1.0        0.0\n","3        0        0   529.250605  ...        0.0        1.0        0.0\n","4        0        0   785.655883  ...        0.0        1.0        0.0\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":377}]},{"cell_type":"code","metadata":{"id":"jitjxkIAp1nc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"8fdee376-90cf-4784-dbf2-0549defb3666","executionInfo":{"status":"ok","timestamp":1590726246200,"user_tz":-180,"elapsed":1019,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["loans.isnull().sum()"],"execution_count":379,"outputs":[{"output_type":"execute_result","data":{"text/plain":["default      0\n","student      0\n","balance      0\n","income       0\n","default_0    0\n","default_1    0\n","Student_0    0\n","Student_1    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":379}]},{"cell_type":"code","metadata":{"id":"1pNfSZG4rDqj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":272},"outputId":"272f86c5-60d4-4593-9950-20109d4a6655","executionInfo":{"status":"ok","timestamp":1590726257176,"user_tz":-180,"elapsed":1115,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["loans.info()"],"execution_count":380,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10000 entries, 0 to 9999\n","Data columns (total 8 columns):\n"," #   Column     Non-Null Count  Dtype  \n","---  ------     --------------  -----  \n"," 0   default    10000 non-null  int64  \n"," 1   student    10000 non-null  int64  \n"," 2   balance    10000 non-null  float64\n"," 3   income     10000 non-null  float64\n"," 4   default_0  10000 non-null  float64\n"," 5   default_1  10000 non-null  float64\n"," 6   Student_0  10000 non-null  float64\n"," 7   Student_1  10000 non-null  float64\n","dtypes: float64(6), int64(2)\n","memory usage: 625.1 KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HuPqaHa3rGU9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"96c56e2f-decd-4a3e-9dd2-dda3942ae97b","executionInfo":{"status":"ok","timestamp":1590726331647,"user_tz":-180,"elapsed":915,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.boxplot(x='default', y='income', data=loans, palette='hls')"],"execution_count":383,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf39786d8>"]},"metadata":{"tags":[]},"execution_count":383},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"_hHJA2efrT1C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"3d8245ea-6c05-40ed-f281-68fc5ffa82af","executionInfo":{"status":"ok","timestamp":1590726369311,"user_tz":-180,"elapsed":3764,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.boxplot(x='default', y='balance', data=loans, palette='hls')"],"execution_count":384,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf3969748>"]},"metadata":{"tags":[]},"execution_count":384},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"mHa6sVx7pi_l","colab_type":"code","colab":{}},"source":["loans.drop('student', axis=1, inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"40lWERucrhES","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":327},"outputId":"0d922c62-52ad-47b3-f192-a5ea0340b836","executionInfo":{"status":"ok","timestamp":1590726449499,"user_tz":-180,"elapsed":976,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["sns.heatmap(loans.corr())"],"execution_count":387,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fddf37a7828>"]},"metadata":{"tags":[]},"execution_count":387},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"XwDuyxETrtVa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"f2469468-8237-4397-da6e-d8c9df3dc52e","executionInfo":{"status":"ok","timestamp":1590726472582,"user_tz":-180,"elapsed":1292,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["loans.shape"],"execution_count":388,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 7)"]},"metadata":{"tags":[]},"execution_count":388}]},{"cell_type":"code","metadata":{"id":"tkEXVN7ir64N","colab_type":"code","colab":{}},"source":["# Splitting our dataset\n","#\n","X = loans.drop(\"default\",axis=1)\n","y = loans[\"default\"]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3, random_state=25)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Hu852lasC0T","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"outputId":"f73b2e68-20e0-46f9-aba5-a166d81f9f94","executionInfo":{"status":"ok","timestamp":1590726512917,"user_tz":-180,"elapsed":1094,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Fitting our model\n","# \n","from sklearn.linear_model import LogisticRegression\n","\n","LogReg = LogisticRegression()\n","LogReg.fit(X_train, y_train)"],"execution_count":390,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":390}]},{"cell_type":"code","metadata":{"id":"vhQyhjqqsExz","colab_type":"code","colab":{}},"source":["# Using our model to make a prediction\n","#\n","y_pred = LogReg.predict(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3McOtYftsHPa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"2d874548-1d12-4756-f15a-7f5c9e1023a3","executionInfo":{"status":"ok","timestamp":1590726541244,"user_tz":-180,"elapsed":1078,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Evaluating the model\n","#\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix = confusion_matrix(y_test, y_pred)\n","confusion_matrix\n","\n","# The results from the confusion matrix tell us that 2905 and 95 are the number of correct predictions.\n","# There were zero number of incorrect predictions."],"execution_count":392,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2905,    0],\n","       [   0,   95]])"]},"metadata":{"tags":[]},"execution_count":392}]}]}