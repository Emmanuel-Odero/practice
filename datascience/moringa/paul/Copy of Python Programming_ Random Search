{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Python Programming: Random Search","provenance":[{"file_id":"1vwFO9hHu5MKii_kWtnaiU05yrqI4Bypt","timestamp":1590693644028}],"collapsed_sections":["k6mu0__7OjF8","LoZYTKzdNPw1"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"X5ma2Mw6_6Dt","colab_type":"text"},"source":["# Python Programming: Random Search"]},{"cell_type":"markdown","metadata":{"id":"k6mu0__7OjF8","colab_type":"text"},"source":["## Example"]},{"cell_type":"code","metadata":{"id":"tftAsaCN_xbw","colab_type":"code","colab":{}},"source":["## Example 1\n","# ---\n","# Perform hyperparameter tuning then predict the quality of wine using Random Search. \n","# ---\n","# Dataset url = http://bit.ly/TuningDataset\n","# ---\n","# OUR CODE GOES BELOW "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bnvF1TbuBFSP","colab_type":"code","colab":{}},"source":["# Importing the required libraries\n","# ---\n","#\n","import pandas as pd\n","import numpy as np"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6io-7e6WAaLU","colab_type":"code","colab":{}},"source":["# Importing our Dataset\n","# ---\n","#\n","dataset = pd.read_csv(\"http://bit.ly/TuningDataset\", sep=';')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fprG-77uCN81","colab_type":"code","outputId":"16252615-5dfd-40d3-8d38-1107677fc737","executionInfo":{"status":"ok","timestamp":1590728680526,"user_tz":-180,"elapsed":1596,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["# Previewing our Dataset\n","# ---\n","#\n","dataset.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.4</td>\n","      <td>0.70</td>\n","      <td>0.00</td>\n","      <td>1.9</td>\n","      <td>0.076</td>\n","      <td>11.0</td>\n","      <td>34.0</td>\n","      <td>0.9978</td>\n","      <td>3.51</td>\n","      <td>0.56</td>\n","      <td>9.4</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7.8</td>\n","      <td>0.88</td>\n","      <td>0.00</td>\n","      <td>2.6</td>\n","      <td>0.098</td>\n","      <td>25.0</td>\n","      <td>67.0</td>\n","      <td>0.9968</td>\n","      <td>3.20</td>\n","      <td>0.68</td>\n","      <td>9.8</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7.8</td>\n","      <td>0.76</td>\n","      <td>0.04</td>\n","      <td>2.3</td>\n","      <td>0.092</td>\n","      <td>15.0</td>\n","      <td>54.0</td>\n","      <td>0.9970</td>\n","      <td>3.26</td>\n","      <td>0.65</td>\n","      <td>9.8</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.2</td>\n","      <td>0.28</td>\n","      <td>0.56</td>\n","      <td>1.9</td>\n","      <td>0.075</td>\n","      <td>17.0</td>\n","      <td>60.0</td>\n","      <td>0.9980</td>\n","      <td>3.16</td>\n","      <td>0.58</td>\n","      <td>9.8</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7.4</td>\n","      <td>0.70</td>\n","      <td>0.00</td>\n","      <td>1.9</td>\n","      <td>0.076</td>\n","      <td>11.0</td>\n","      <td>34.0</td>\n","      <td>0.9978</td>\n","      <td>3.51</td>\n","      <td>0.56</td>\n","      <td>9.4</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n","0            7.4              0.70         0.00  ...       0.56      9.4        5\n","1            7.8              0.88         0.00  ...       0.68      9.8        5\n","2            7.8              0.76         0.04  ...       0.65      9.8        5\n","3           11.2              0.28         0.56  ...       0.58      9.8        6\n","4            7.4              0.70         0.00  ...       0.56      9.4        5\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"85-ZhbKfCQNu","colab_type":"code","colab":{}},"source":["# Performing Data Preprocessing\n","# ---\n","# \n","X = dataset.iloc[:, 0:11].values\n","y = dataset.iloc[:, 11].values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HRYfL5brDIMI","colab_type":"code","colab":{}},"source":["# Performing Data Preprocessing\n","# ---\n","# \n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JfNu9GniC6TL","colab_type":"code","colab":{}},"source":[" # Scaling our Data\n","# ---\n","# \n","from sklearn.preprocessing import StandardScaler\n","feature_scaler = StandardScaler()\n","X_train = feature_scaler.fit_transform(X_train)\n","X_test = feature_scaler.transform(X_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jQbqNGppIwCD","colab_type":"code","colab":{}},"source":["# Training and Cross Validation\n","# ---\n","# \n","from sklearn.ensemble import RandomForestClassifier\n","classifier = RandomForestClassifier(n_estimators=300, random_state=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qQz-BvHSJD1C","colab_type":"code","colab":{}},"source":["# Training and Cross Validation\n","# ---\n","# Next, to implement cross validation, the cross_val_score method \n","# of the sklearn.model_selection library can be used. \n","# The cross_val_score returns the accuracy for all the folds. \n","# Values for 4 parameters are required to be passed to the cross_val_score class. \n","# The first parameter is estimator which basically specifies \n","# the algorithm that you want to use for cross validation. \n","# The second and third parameters, X and y, contain the X_train and y_train data i.e. features and labels. \n","# Finally the number of folds is passed to the cv parameter as shown in the following code\n","# ---\n","# \n","from sklearn.model_selection import cross_val_score\n","all_accuracies = cross_val_score(estimator=classifier, X=X_train, y=y_train, cv=5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g288wwhYJEcS","colab_type":"code","outputId":"d4a5f08c-6879-4d55-d7f8-4213f413282e","executionInfo":{"status":"ok","timestamp":1590728875081,"user_tz":-180,"elapsed":1293,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Printing the accuracies returned for five folds \n","# by the cross_val_score method by calling print on all_accuracies\n","# ---\n","#\n","print(all_accuracies.mean())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.668068340306834\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CWXSIEBADSaw","colab_type":"code","colab":{}},"source":["# Step 1: Hyperparameters: Getting Started with Random Search\n","# ---\n","# Random search differs from grid search in that we longer \n","# provide a discrete set of values to explore for each hyperparameter; rather, \n","# we provide a statistical distribution for each hyperparameter \n","# from which values may be randomly sampled.\n","# We'll define a sampling distribution for each hyperparameter.\n","# ---\n","# \n","\n","# specify parameters and distributions to sample from\n","from scipy.stats import randint as sp_randint\n","param_dist = {\"max_depth\": [3, None],\n","              \"max_features\": sp_randint(1, 11),\n","              \"min_samples_split\": sp_randint(2, 11),\n","              \"bootstrap\": [True, False],\n","              \"criterion\": [\"gini\", \"entropy\"]}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D1qVq872GqKC","colab_type":"code","colab":{}},"source":["# Step 2: Instantiating RandomizedSearchCV object \n","# ---\n","# \n","from sklearn.model_selection import RandomizedSearchCV \n","random_sr = RandomizedSearchCV(classifier, param_dist, cv = 5) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vrb1kDfVMu2H","colab_type":"code","outputId":"1f1164e7-fe1b-4c3a-b780-98564457325b","executionInfo":{"status":"ok","timestamp":1590728963224,"user_tz":-180,"elapsed":71359,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":428}},"source":["# Step 3: Calling the fit method\n","# ---\n","#\n","random_sr.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=5, error_score=nan,\n","                   estimator=RandomForestClassifier(bootstrap=True,\n","                                                    ccp_alpha=0.0,\n","                                                    class_weight=None,\n","                                                    criterion='gini',\n","                                                    max_depth=None,\n","                                                    max_features='auto',\n","                                                    max_leaf_nodes=None,\n","                                                    max_samples=None,\n","                                                    min_impurity_decrease=0.0,\n","                                                    min_impurity_split=None,\n","                                                    min_samples_leaf=1,\n","                                                    min_samples_split=2,\n","                                                    min_weight_fraction_leaf=0.0,\n","                                                    n_estimators=300,\n","                                                    n_jobs...\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'criterion': ['gini', 'entropy'],\n","                                        'max_depth': [3, None],\n","                                        'max_features': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7ff1a5acb5f8>,\n","                                        'min_samples_split': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7ff1a5acb710>},\n","                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n","                   return_train_score=False, scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"yLPQKoJdHpZm","colab_type":"code","outputId":"3b3b662c-3a13-4488-b757-28103c5dc920","executionInfo":{"status":"ok","timestamp":1590693768118,"user_tz":-180,"elapsed":39210,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["# Step 4: Checking the parameters that return the highest accuracy\n","# ---\n","#\n","best_parameters = random_sr.best_params_\n","print(best_parameters)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["{'bootstrap': True, 'criterion': 'gini', 'max_depth': None, 'max_features': 4, 'min_samples_split': 4}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YR2Dh4kBJLpI","colab_type":"code","outputId":"7eeb62dd-ed5a-4087-abe7-e80fbdd184bb","executionInfo":{"status":"ok","timestamp":1590693770379,"user_tz":-180,"elapsed":2224,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Finding the obtained accuracy\n","# --\n","# \n","best_result = random_sr.best_score_\n","print(best_result)\n","\n","# Compare this with the "],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.668057880055788\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LoZYTKzdNPw1","colab_type":"text"},"source":["## <font color=\"green\">Challenges</font>"]},{"cell_type":"code","metadata":{"id":"a2Fn-tSkKeWl","colab_type":"code","outputId":"4e47dfb9-4a3f-4506-f648-7eae93f7da4a","executionInfo":{"status":"ok","timestamp":1590729255954,"user_tz":-180,"elapsed":2152,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["## Challenge 1\n","# ---\n","# Question: Implement hyperparameter tuning using random search upon creating a model to classify \n","# incomes of persons given the following dataset.\n","# ---\n","# Dataset url = http://bit.ly/HyperParameterTuningDataset\n","# ---\n","# OUR CODE GOES BELOW\n","#\n","incomes = pd.read_csv(\"http://bit.ly/HyperParameterTuningDataset\")\n","incomes.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>39</th>\n","      <th>State-gov</th>\n","      <th>Bachelors</th>\n","      <th>13</th>\n","      <th>Never-married</th>\n","      <th>Adm-clerical</th>\n","      <th>Not-in-family</th>\n","      <th>White</th>\n","      <th>Male</th>\n","      <th>2174</th>\n","      <th>0</th>\n","      <th>40</th>\n","      <th>United-States</th>\n","      <th>&lt;=50K</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>50</td>\n","      <td>Self-emp-not-inc</td>\n","      <td>Bachelors</td>\n","      <td>13</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Exec-managerial</td>\n","      <td>Husband</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38</td>\n","      <td>Private</td>\n","      <td>HS-grad</td>\n","      <td>9</td>\n","      <td>Divorced</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Not-in-family</td>\n","      <td>White</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>53</td>\n","      <td>Private</td>\n","      <td>11th</td>\n","      <td>7</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Handlers-cleaners</td>\n","      <td>Husband</td>\n","      <td>Black</td>\n","      <td>Male</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>28</td>\n","      <td>Private</td>\n","      <td>Bachelors</td>\n","      <td>13</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Prof-specialty</td>\n","      <td>Wife</td>\n","      <td>Black</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>Cuba</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>37</td>\n","      <td>Private</td>\n","      <td>Masters</td>\n","      <td>14</td>\n","      <td>Married-civ-spouse</td>\n","      <td>Exec-managerial</td>\n","      <td>Wife</td>\n","      <td>White</td>\n","      <td>Female</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>United-States</td>\n","      <td>&lt;=50K</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   39          State-gov   Bachelors  13  ...  0  40   United-States   <=50K\n","0  50   Self-emp-not-inc   Bachelors  13  ...  0  13   United-States   <=50K\n","1  38            Private     HS-grad   9  ...  0  40   United-States   <=50K\n","2  53            Private        11th   7  ...  0  40   United-States   <=50K\n","3  28            Private   Bachelors  13  ...  0  40            Cuba   <=50K\n","4  37            Private     Masters  14  ...  0  40   United-States   <=50K\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"BThgeqrs5GXx","colab_type":"code","outputId":"346bc31d-074b-4c7c-92d1-250d28e1540c","executionInfo":{"status":"ok","timestamp":1590729956304,"user_tz":-180,"elapsed":7595,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["# Identify categorical columns and create a list of them\n","#\n","categorical = incomes.dtypes ==object\n","categorical_cols = incomes.columns[categorical].tolist()\n","print(f\"Categorical columns are: \\n{categorical_cols}\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Categorical columns are: \n","[' State-gov', ' Bachelors', ' Never-married', ' Adm-clerical', ' Not-in-family', ' White', ' Male', ' United-States', ' <=50K']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JHXWP7tM5UPt","colab_type":"code","colab":{}},"source":["# Instantiate labelencoder\n","#\n","from sklearn.preprocessing import LabelEncoder\n","\n","le = LabelEncoder()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oDHyNX775YN1","colab_type":"code","outputId":"1ce2460b-89f4-42ee-a0b6-0b3b0ff3c7c3","executionInfo":{"status":"ok","timestamp":1590730021323,"user_tz":-180,"elapsed":1411,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":376}},"source":["# Apply the label encoder for each column\n","#\n","incomes[categorical_cols] = incomes[categorical_cols].apply(lambda col: le.fit_transform(col))\n","\n","incomes[categorical_cols].head(10)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State-gov</th>\n","      <th>Bachelors</th>\n","      <th>Never-married</th>\n","      <th>Adm-clerical</th>\n","      <th>Not-in-family</th>\n","      <th>White</th>\n","      <th>Male</th>\n","      <th>United-States</th>\n","      <th>&lt;=50K</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4</td>\n","      <td>9</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    State-gov   Bachelors   Never-married  ...   Male   United-States   <=50K\n","0           6           9               2  ...      1              39       0\n","1           4          11               0  ...      1              39       0\n","2           4           1               2  ...      1              39       0\n","3           4           9               2  ...      0               5       0\n","4           4          12               2  ...      0              39       0\n","5           4           6               3  ...      0              23       0\n","6           6          11               2  ...      1              39       1\n","7           4          12               4  ...      0              39       1\n","8           4           9               2  ...      1              39       1\n","9           4          15               2  ...      1              39       1\n","\n","[10 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"ibkrvW525jTH","colab_type":"text"},"source":["**OneHotEncoding**"]},{"cell_type":"code","metadata":{"id":"DpNY8Uwj5pIP","colab_type":"code","colab":{}},"source":["# import OneHotEncoder\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# Instantiate OneHotEncoder\n","ohe = OneHotEncoder()\n","\n","encoded = ohe.fit_transform(incomes[categorical_cols].values.reshape(-1,1)).toarray()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qgpG9OCW_Eg9","colab_type":"code","outputId":"23742d52-26a3-4c50-ae05-547d1f5d0d2b","executionInfo":{"status":"ok","timestamp":1590731548094,"user_tz":-180,"elapsed":1254,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["dfOneHot = pd.DataFrame(encoded, columns = ['symptom_'+ str(int(i)) for i in range(encoded.shape[1])])\n","\n","incomes = pd.concat([incomes, dfOneHot], axis=1)\n","incomes.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>39</th>\n","      <th>State-gov</th>\n","      <th>Bachelors</th>\n","      <th>13</th>\n","      <th>Never-married</th>\n","      <th>Adm-clerical</th>\n","      <th>Not-in-family</th>\n","      <th>White</th>\n","      <th>Male</th>\n","      <th>2174</th>\n","      <th>0</th>\n","      <th>40</th>\n","      <th>United-States</th>\n","      <th>&lt;=50K</th>\n","      <th>symptom_0</th>\n","      <th>symptom_1</th>\n","      <th>symptom_2</th>\n","      <th>symptom_3</th>\n","      <th>symptom_4</th>\n","      <th>symptom_5</th>\n","      <th>symptom_6</th>\n","      <th>symptom_7</th>\n","      <th>symptom_8</th>\n","      <th>symptom_9</th>\n","      <th>symptom_10</th>\n","      <th>symptom_11</th>\n","      <th>symptom_12</th>\n","      <th>symptom_13</th>\n","      <th>symptom_14</th>\n","      <th>symptom_15</th>\n","      <th>symptom_16</th>\n","      <th>symptom_17</th>\n","      <th>symptom_18</th>\n","      <th>symptom_19</th>\n","      <th>symptom_20</th>\n","      <th>symptom_21</th>\n","      <th>symptom_22</th>\n","      <th>symptom_23</th>\n","      <th>symptom_24</th>\n","      <th>symptom_25</th>\n","      <th>symptom_26</th>\n","      <th>symptom_27</th>\n","      <th>symptom_28</th>\n","      <th>symptom_29</th>\n","      <th>symptom_30</th>\n","      <th>symptom_31</th>\n","      <th>symptom_32</th>\n","      <th>symptom_33</th>\n","      <th>symptom_34</th>\n","      <th>symptom_35</th>\n","      <th>symptom_36</th>\n","      <th>symptom_37</th>\n","      <th>symptom_38</th>\n","      <th>symptom_39</th>\n","      <th>symptom_40</th>\n","      <th>symptom_41</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>50.0</td>\n","      <td>6.0</td>\n","      <td>9.0</td>\n","      <td>13.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>13.0</td>\n","      <td>39.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38.0</td>\n","      <td>4.0</td>\n","      <td>11.0</td>\n","      <td>9.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>39.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>53.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>7.0</td>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>39.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>28.0</td>\n","      <td>4.0</td>\n","      <td>9.0</td>\n","      <td>13.0</td>\n","      <td>2.0</td>\n","      <td>10.0</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>37.0</td>\n","      <td>4.0</td>\n","      <td>12.0</td>\n","      <td>14.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>5.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>40.0</td>\n","      <td>39.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     39   State-gov   Bachelors  ...  symptom_39  symptom_40  symptom_41\n","0  50.0         6.0         9.0  ...         0.0         0.0         0.0\n","1  38.0         4.0        11.0  ...         0.0         0.0         0.0\n","2  53.0         4.0         1.0  ...         0.0         0.0         0.0\n","3  28.0         4.0         9.0  ...         0.0         0.0         0.0\n","4  37.0         4.0        12.0  ...         0.0         0.0         0.0\n","\n","[5 rows x 56 columns]"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"tvnuRm7k3Rgm","colab_type":"code","outputId":"4737c06d-6c1c-4f47-ee9a-082ed28974ae","executionInfo":{"status":"ok","timestamp":1590731557734,"user_tz":-180,"elapsed":1496,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["incomes.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(293040, 56)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"Y11SaYcO_g9t","colab_type":"code","outputId":"bb0d9bf1-b9bc-4fe3-d493-f346ab03c679","executionInfo":{"status":"ok","timestamp":1590731633534,"user_tz":-180,"elapsed":3255,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":986}},"source":["incomes.isnull().sum()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["39                260480\n"," State-gov        260480\n"," Bachelors        260480\n","13                260480\n"," Never-married    260480\n"," Adm-clerical     260480\n"," Not-in-family    260480\n"," White            260480\n"," Male             260480\n","2174              260480\n","0                 260480\n","40                260480\n"," United-States    260480\n"," <=50K            260480\n","symptom_0              0\n","symptom_1              0\n","symptom_2              0\n","symptom_3              0\n","symptom_4              0\n","symptom_5              0\n","symptom_6              0\n","symptom_7              0\n","symptom_8              0\n","symptom_9              0\n","symptom_10             0\n","symptom_11             0\n","symptom_12             0\n","symptom_13             0\n","symptom_14             0\n","symptom_15             0\n","symptom_16             0\n","symptom_17             0\n","symptom_18             0\n","symptom_19             0\n","symptom_20             0\n","symptom_21             0\n","symptom_22             0\n","symptom_23             0\n","symptom_24             0\n","symptom_25             0\n","symptom_26             0\n","symptom_27             0\n","symptom_28             0\n","symptom_29             0\n","symptom_30             0\n","symptom_31             0\n","symptom_32             0\n","symptom_33             0\n","symptom_34             0\n","symptom_35             0\n","symptom_36             0\n","symptom_37             0\n","symptom_38             0\n","symptom_39             0\n","symptom_40             0\n","symptom_41             0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"4w8s1lfL_spd","colab_type":"code","colab":{}},"source":["incomes.dropna(inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fr2kdiIY2q6J","colab_type":"code","colab":{}},"source":["# Performing Data Preprocessing\n","# ---\n","# \n","X = incomes.iloc[:, 0:13].values\n","y = incomes.iloc[:, 13].values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ngu1qLZM4QUk","colab_type":"code","colab":{}},"source":["# Performing Data Preprocessing\n","# ---\n","# \n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hZ6nYjpV4acC","colab_type":"code","outputId":"0e37b38d-bde7-47c6-bfb8-3eb92893ec48","executionInfo":{"status":"error","timestamp":1590729753434,"user_tz":-180,"elapsed":1307,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["# Scaling our Data\n","# ---\n","# \n","from sklearn.preprocessing import StandardScaler\n","feature_scaler = StandardScaler()\n","X_train = feature_scaler.fit_transform(X_train)\n","X_test = feature_scaler.transform(X_test)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-dce1d682de4a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mfeature_scaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeature_scaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeature_scaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    569\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    570\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 571\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    572\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    573\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    667\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 669\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    670\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    671\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    698\u001b[0m         X = check_array(X, accept_sparse=('csr', 'csc'),\n\u001b[1;32m    699\u001b[0m                         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 700\u001b[0;31m                         force_all_finite='allow-nan')\n\u001b[0m\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    702\u001b[0m         \u001b[0;31m# Even in the case of `with_mean=False`, we update the mean anyway\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    529\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 531\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \"\"\"\n\u001b[0;32m---> 85\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: ' Private'"]}]},{"cell_type":"code","metadata":{"id":"JyifQX_bOuEm","colab_type":"code","colab":{}},"source":["## Challenge 2\n","# ---\n","# Perform hyperparameter tuning by applying Random search to the challenges that you worked on during Week 8.\n","# ---  "],"execution_count":0,"outputs":[]}]}